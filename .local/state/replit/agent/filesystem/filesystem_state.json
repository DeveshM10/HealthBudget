{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for Affordable Healthcare Platform\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from healthcare leaders like Practo and telemedicine platforms, combined with fintech transparency patterns from platforms like CRED and Paytm for budget-focused UX.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Medical Teal: 180 65% 45% (trust, healthcare)\n- Deep Blue: 210 70% 25% (professionalism, security)\n\n**Light Mode:**\n- Background: 0 0% 98%\n- Text Primary: 210 15% 15%\n- Text Secondary: 210 10% 45%\n\n**Dark Mode:**\n- Background: 210 15% 8%\n- Text Primary: 0 0% 95%\n- Text Secondary: 210 15% 70%\n\n**Accent Colors:**\n- Success Green: 120 60% 50% (verified badges, positive actions)\n- Warning Orange: 25 85% 55% (alerts, budget notifications)\n\n### Typography\n- **Primary**: Inter (Google Fonts) - clean, medical-grade readability\n- **Headers**: Inter Semi-Bold (600) for trust and clarity\n- **Body**: Inter Regular (400) for accessibility\n- **Small Text**: Inter Medium (500) for important details like pricing\n\n### Layout System\n**Tailwind Spacing Units**: 2, 4, 6, 8, 12, 16\n- Tight spacing (p-2, m-2) for compact info\n- Standard spacing (p-4, m-4) for general layout\n- Generous spacing (p-8, m-8) for section separation\n\n### Component Library\n\n**Navigation:**\n- Clean header with logo, search bar, and user profile\n- Budget tier selector prominently displayed\n- Mobile-first hamburger menu\n\n**Core UI Elements:**\n- Rounded buttons (rounded-lg) with medical-grade feel\n- Doctor cards with verification badges\n- Budget tier cards with clear pricing\n- Trust indicators (verified badges, encryption notices)\n\n**Forms:**\n- Large, accessible input fields\n- Clear validation states\n- Multi-step booking flow with progress indicators\n\n**Data Displays:**\n- Doctor profiles with credentials and transparent pricing\n- Appointment calendars with availability indicators\n- Dashboard cards for patient history\n\n**Overlays:**\n- Modal dialogs for booking confirmation\n- Toast notifications for appointment updates\n- Loading states for video call connections\n\n### Visual Treatment for Marketing Pages\n\n**Color Usage:**\n- Hero sections can use vibrant teal gradients\n- Budget tier cards with subtle color coding\n- Trust elements in calming blues\n\n**Gradients:**\n- Hero background: Soft teal to blue gradient (180 65% 45% to 210 70% 35%)\n- Budget cards: Subtle gradients per tier\n- CTA buttons: Light teal gradient for warmth\n\n**Background Treatments:**\n- Clean medical white with subtle grid patterns\n- Soft gradient overlays on hero sections\n- Minimal geometric patterns for trust sections\n\n### Key Design Principles\n1. **Budget Transparency**: Price information always visible and prominent\n2. **Medical Trust**: Verification badges, credentials clearly displayed\n3. **Accessibility**: Large touch targets, high contrast, simple navigation\n4. **Indian Context**: Multilingual support indicators, familiar payment methods\n5. **Mobile-First**: Optimized for smartphone usage patterns\n\n### Images\n- **Hero Image**: Large banner showing diverse Indian families in healthcare settings, with gradient overlay\n- **Doctor Photos**: Professional headshots with verification badges\n- **Budget Tier Illustrations**: Simple icons representing different care levels\n- **Trust Badges**: Medical certification and security compliance logos\n- **Feature Icons**: Healthcare-specific iconography using Heroicons medical set\n\n### Critical Constraints\n- Maximum 4 sections on landing page: Hero, Budget Tiers, Trust/Features, CTA\n- Single viewport hero design focusing on budget selection\n- Minimal animations - only loading states and subtle hover effects\n- Strong emphasis on verification and trust indicators throughout","size_bytes":3741},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4059},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertDoctorSchema, insertPatientSchema, insertConsultationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Middleware for parsing JSON\n  app.use(express.json());\n\n  // Setup Replit Auth\n  await setupAuth(app);\n\n  // Auth routes for Replit Auth\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get healthcare profile information\n      let roleProfile = null;\n      if (user.userType === 'patient') {\n        roleProfile = await storage.getPatientByUserId(userId);\n      } else if (user.userType === 'doctor') {\n        roleProfile = await storage.getDoctorByUserId(userId);\n      }\n\n      // Return enriched user data with role profile\n      res.json({\n        ...user,\n        roleProfile\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Note: Legacy email/password authentication removed in favor of Replit Auth\n  // All authentication now flows through /api/login (Replit OIDC)\n\n  // Doctor Search Routes\n  app.get('/api/doctors/search', async (req, res) => {\n    try {\n      const { specialty, city, minRating, maxFee, query } = req.query;\n      \n      const filters: any = {};\n      if (specialty) filters.specialty = specialty as string;\n      if (city) filters.city = city as string;\n      if (minRating) filters.minRating = parseFloat(minRating as string);\n      if (maxFee) filters.maxFee = parseFloat(maxFee as string);\n\n      let doctors = await storage.searchDoctors(filters);\n      \n      // Text search filter if query provided\n      if (query) {\n        const searchQuery = (query as string).toLowerCase();\n        doctors = doctors.filter(doctor => \n          doctor.fullName.toLowerCase().includes(searchQuery) ||\n          doctor.primarySpecialty.toLowerCase().includes(searchQuery) ||\n          doctor.bio?.toLowerCase().includes(searchQuery)\n        );\n      }\n\n      res.json(doctors);\n    } catch (error) {\n      console.error('Doctor search error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/doctors/:id', async (req, res) => {\n    try {\n      const doctor = await storage.getDoctor(req.params.id);\n      if (!doctor) {\n        return res.status(404).json({ error: 'Doctor not found' });\n      }\n      res.json(doctor);\n    } catch (error) {\n      console.error('Get doctor error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Consultation/Booking Routes\n  app.post('/api/consultations', async (req, res) => {\n    try {\n      // Validate required fields\n      const consultationSchema = z.object({\n        patientId: z.string(),\n        doctorId: z.string(),\n        scheduledAt: z.string().datetime(),\n        duration: z.number().min(15).max(120).default(30),\n        consultationType: z.enum(['video', 'audio', 'chat']).default('video'),\n        chiefComplaint: z.string().min(1),\n        consultationFee: z.string(),\n        platformFee: z.string(),\n        totalAmount: z.string()\n      });\n\n      const validationResult = consultationSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: 'Invalid consultation data', \n          details: validationResult.error.errors \n        });\n      }\n\n      const consultationData = validationResult.data;\n\n      // Verify patient exists\n      const patient = await storage.getPatient(consultationData.patientId);\n      if (!patient) {\n        return res.status(404).json({ error: 'Patient not found' });\n      }\n\n      // Verify doctor exists and is verified\n      const doctor = await storage.getDoctor(consultationData.doctorId);\n      if (!doctor) {\n        return res.status(404).json({ error: 'Doctor not found' });\n      }\n      if (doctor.verificationStatus !== 'verified' || !doctor.isActive) {\n        return res.status(400).json({ error: 'Doctor is not available for consultations' });\n      }\n\n      const consultation = await storage.createConsultation({\n        ...consultationData,\n        scheduledAt: new Date(consultationData.scheduledAt)\n      });\n\n      res.status(201).json(consultation);\n    } catch (error) {\n      console.error('Create consultation error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/consultations/patient/:patientId', async (req, res) => {\n    try {\n      const consultations = await storage.getPatientConsultations(req.params.patientId);\n      res.json(consultations);\n    } catch (error) {\n      console.error('Get patient consultations error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/consultations/doctor/:doctorId', async (req, res) => {\n    try {\n      const consultations = await storage.getDoctorConsultations(req.params.doctorId);\n      res.json(consultations);\n    } catch (error) {\n      console.error('Get doctor consultations error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Patient Routes\n  app.get('/api/patients/:id', async (req, res) => {\n    try {\n      const patient = await storage.getPatient(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ error: 'Patient not found' });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error('Get patient error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/patients/user/:userId', async (req, res) => {\n    try {\n      const patient = await storage.getPatientByUserId(req.params.userId);\n      if (!patient) {\n        return res.status(404).json({ error: 'Patient not found' });\n      }\n      res.json(patient);\n    } catch (error) {\n      console.error('Get patient by user ID error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Emergency Routes\n  app.post('/api/emergency', async (req, res) => {\n    try {\n      const emergencyCase = await storage.createEmergencyCase(req.body);\n      res.status(201).json(emergencyCase);\n    } catch (error) {\n      console.error('Create emergency case error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/emergency/active', async (req, res) => {\n    try {\n      const cases = await storage.getActiveEmergencyCases();\n      res.json(cases);\n    } catch (error) {\n      console.error('Get active emergency cases error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Medical Documents Routes\n  app.get('/api/medical-documents/patient/:patientId', async (req, res) => {\n    try {\n      const documents = await storage.getPatientDocuments(req.params.patientId);\n      res.json(documents);\n    } catch (error) {\n      console.error('Get patient documents error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Seed Data Route for Testing (only in development)\n  app.post('/api/seed-data', async (req, res) => {\n    // Secure this endpoint\n    if (process.env.NODE_ENV === 'production') {\n      return res.status(404).json({ error: 'Not found' });\n    }\n    try {\n      // Create sample doctors\n      const doctors = [\n        {\n          fullName: \"Dr. Sarah Johnson\",\n          primarySpecialty: \"Cardiology\",\n          consultationFee: \"500.00\",\n          city: \"Mumbai\",\n          state: \"Maharashtra\",\n          yearsOfExperience: 12,\n          rating: \"4.8\",\n          totalConsultations: 1250,\n          totalReviews: 856,\n          bio: \"Specialized in interventional cardiology with extensive experience in heart disease prevention and treatment.\"\n        },\n        {\n          fullName: \"Dr. Raj Patel\",\n          primarySpecialty: \"Dermatology\", \n          consultationFee: \"350.00\",\n          city: \"Delhi\",\n          state: \"Delhi\",\n          yearsOfExperience: 8,\n          rating: \"4.6\",\n          totalConsultations: 980,\n          totalReviews: 642,\n          bio: \"Expert in skin conditions, cosmetic dermatology, and advanced treatment procedures.\"\n        },\n        {\n          fullName: \"Dr. Priya Sharma\",\n          primarySpecialty: \"Pediatrics\",\n          consultationFee: \"300.00\", \n          city: \"Bangalore\",\n          state: \"Karnataka\",\n          yearsOfExperience: 15,\n          rating: \"4.9\",\n          totalConsultations: 2100,\n          totalReviews: 1845,\n          bio: \"Dedicated pediatrician with special focus on child development and preventive care.\"\n        },\n        {\n          fullName: \"Dr. Amit Kumar\",\n          primarySpecialty: \"General Medicine\",\n          consultationFee: \"250.00\",\n          city: \"Chennai\",\n          state: \"Tamil Nadu\", \n          yearsOfExperience: 10,\n          rating: \"4.5\",\n          totalConsultations: 1500,\n          totalReviews: 1200,\n          bio: \"Experienced general physician providing comprehensive primary healthcare services.\"\n        }\n      ];\n\n      for (const doctorData of doctors) {\n        // Create user account for doctor\n        const passwordHash = await bcrypt.hash('password123', 10);\n        const user = await storage.createUser({\n          email: `${doctorData.fullName.toLowerCase().replace(/[^a-z]/g, '')}@affordcare.com`,\n          passwordHash,\n          userType: 'doctor',\n          password: 'password123'\n        });\n\n        // Create doctor profile\n        const doctor = await storage.createDoctor({\n          userId: user.id,\n          fullName: doctorData.fullName,\n          medicalLicense: `LIC${Math.random().toString(36).substr(2, 8).toUpperCase()}`,\n          licenseState: doctorData.state,\n          licenseExpiry: '2026-12-31',\n          primarySpecialty: doctorData.primarySpecialty,\n          medicalSchool: 'All India Institute of Medical Sciences',\n          yearsOfExperience: doctorData.yearsOfExperience,\n          consultationFee: doctorData.consultationFee,\n          city: doctorData.city,\n          state: doctorData.state,\n          bio: doctorData.bio\n        });\n\n        // Update with additional fields that can't be set during creation\n        await storage.updateDoctor(doctor.id, {\n          rating: doctorData.rating,\n          totalConsultations: doctorData.totalConsultations,\n          totalReviews: doctorData.totalReviews,\n          verificationStatus: 'verified'\n        });\n      }\n\n      res.json({ message: 'Sample data created successfully', doctorsCreated: doctors.length });\n    } catch (error) {\n      console.error('Seed data error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":11299},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type UpsertUser,\n  type Doctor, \n  type InsertDoctor,\n  type Patient,\n  type InsertPatient,\n  type Consultation,\n  type InsertConsultation,\n  type MedicalDocument,\n  type InsertMedicalDocument,\n  type HealthMetric,\n  type InsertHealthMetric,\n  type CarePlan,\n  type InsertCarePlan,\n  type EmergencyCase,\n  type InsertEmergencyCase\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Comprehensive storage interface for healthcare platform\nexport interface IStorage {\n  // User Management (includes Replit Auth required methods)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  // Required for Replit Auth\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Doctor Management\n  getDoctor(id: string): Promise<Doctor | undefined>;\n  getDoctorByUserId(userId: string): Promise<Doctor | undefined>;\n  createDoctor(doctor: InsertDoctor): Promise<Doctor>;\n  updateDoctor(id: string, updates: Partial<Doctor>): Promise<Doctor | undefined>;\n  searchDoctors(filters: {\n    specialty?: string;\n    city?: string;\n    minRating?: number;\n    maxFee?: number;\n    availability?: string;\n  }): Promise<Doctor[]>;\n  \n  // Patient Management\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByUserId(userId: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, updates: Partial<Patient>): Promise<Patient | undefined>;\n  \n  // Consultation Management\n  getConsultation(id: string): Promise<Consultation | undefined>;\n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  updateConsultation(id: string, updates: Partial<Consultation>): Promise<Consultation | undefined>;\n  getPatientConsultations(patientId: string): Promise<Consultation[]>;\n  getDoctorConsultations(doctorId: string): Promise<Consultation[]>;\n  \n  // Medical Document Management\n  getMedicalDocument(id: string): Promise<MedicalDocument | undefined>;\n  createMedicalDocument(document: InsertMedicalDocument): Promise<MedicalDocument>;\n  getPatientDocuments(patientId: string): Promise<MedicalDocument[]>;\n  \n  // Health Metrics for Chronic Care\n  createHealthMetric(metric: InsertHealthMetric): Promise<HealthMetric>;\n  getPatientHealthMetrics(patientId: string, metricType?: string): Promise<HealthMetric[]>;\n  \n  // Care Plan Management\n  getCarePlan(id: string): Promise<CarePlan | undefined>;\n  createCarePlan(carePlan: InsertCarePlan): Promise<CarePlan>;\n  getPatientCarePlans(patientId: string): Promise<CarePlan[]>;\n  \n  // Emergency Case Management\n  createEmergencyCase(emergencyCase: InsertEmergencyCase): Promise<EmergencyCase>;\n  getEmergencyCase(id: string): Promise<EmergencyCase | undefined>;\n  getActiveEmergencyCases(): Promise<EmergencyCase[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private doctors: Map<string, Doctor>;\n  private patients: Map<string, Patient>;\n  private consultations: Map<string, Consultation>;\n  private medicalDocuments: Map<string, MedicalDocument>;\n  private healthMetrics: Map<string, HealthMetric>;\n  private carePlans: Map<string, CarePlan>;\n  private emergencyCases: Map<string, EmergencyCase>;\n\n  constructor() {\n    this.users = new Map();\n    this.doctors = new Map();\n    this.patients = new Map();\n    this.consultations = new Map();\n    this.medicalDocuments = new Map();\n    this.healthMetrics = new Map();\n    this.carePlans = new Map();\n    this.emergencyCases = new Map();\n  }\n\n  // User Management Implementation\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      isVerified: false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Required for Replit Auth - upserts user from OAuth claims\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = userData.id ? this.users.get(userData.id) : undefined;\n    \n    if (existingUser) {\n      // Update existing user\n      const updatedUser: User = {\n        ...existingUser,\n        ...userData,\n        updatedAt: new Date(),\n      };\n      this.users.set(existingUser.id, updatedUser);\n      return updatedUser;\n    } else {\n      // Create new user\n      const id = userData.id || randomUUID();\n      const user: User = {\n        id,\n        email: userData.email || null,\n        firstName: userData.firstName || null,\n        lastName: userData.lastName || null,\n        profileImageUrl: userData.profileImageUrl || null,\n        userType: userData.userType || null,\n        isVerified: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.users.set(id, user);\n      return user;\n    }\n  }\n\n  // Doctor Management Implementation\n  async getDoctor(id: string): Promise<Doctor | undefined> {\n    return this.doctors.get(id);\n  }\n\n  async getDoctorByUserId(userId: string): Promise<Doctor | undefined> {\n    return Array.from(this.doctors.values()).find(\n      (doctor) => doctor.userId === userId,\n    );\n  }\n\n  async createDoctor(insertDoctor: InsertDoctor): Promise<Doctor> {\n    const id = randomUUID();\n    const doctor: Doctor = {\n      ...insertDoctor,\n      id,\n      profilePhoto: insertDoctor.profilePhoto || null,\n      subSpecialties: insertDoctor.subSpecialties || null,\n      certifications: insertDoctor.certifications || null,\n      residency: insertDoctor.residency || null,\n      fellowship: insertDoctor.fellowship || null,\n      languages: insertDoctor.languages || null,\n      hospitalAffiliations: insertDoctor.hospitalAffiliations || null,\n      bio: insertDoctor.bio || null,\n      specialInterests: insertDoctor.specialInterests || null,\n      researchPublications: insertDoctor.researchPublications || null,\n      awards: insertDoctor.awards || null,\n      availableHours: insertDoctor.availableHours || null,\n      rating: \"0.00\",\n      totalConsultations: 0,\n      totalReviews: 0,\n      isActive: true,\n      verificationStatus: \"pending\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.doctors.set(id, doctor);\n    return doctor;\n  }\n\n  async updateDoctor(id: string, updates: Partial<Doctor>): Promise<Doctor | undefined> {\n    const doctor = this.doctors.get(id);\n    if (!doctor) return undefined;\n    \n    const updatedDoctor = { ...doctor, ...updates, updatedAt: new Date() };\n    this.doctors.set(id, updatedDoctor);\n    return updatedDoctor;\n  }\n\n  async searchDoctors(filters: {\n    specialty?: string;\n    city?: string;\n    minRating?: number;\n    maxFee?: number;\n    availability?: string;\n  }): Promise<Doctor[]> {\n    return Array.from(this.doctors.values()).filter(doctor => {\n      if (filters.specialty && doctor.primarySpecialty !== filters.specialty) return false;\n      if (filters.city && doctor.city !== filters.city) return false;\n      if (filters.minRating && parseFloat(doctor.rating || \"0\") < filters.minRating) return false;\n      if (filters.maxFee && parseFloat(doctor.consultationFee) > filters.maxFee) return false;\n      return doctor.isActive && doctor.verificationStatus === \"verified\";\n    });\n  }\n\n  // Patient Management Implementation\n  async getPatient(id: string): Promise<Patient | undefined> {\n    return this.patients.get(id);\n  }\n\n  async getPatientByUserId(userId: string): Promise<Patient | undefined> {\n    return Array.from(this.patients.values()).find(\n      (patient) => patient.userId === userId,\n    );\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const id = randomUUID();\n    const patient: Patient = {\n      ...insertPatient,\n      id,\n      emergencyContact: insertPatient.emergencyContact || null,\n      bloodGroup: insertPatient.bloodGroup || null,\n      height: insertPatient.height || null,\n      weight: insertPatient.weight || null,\n      allergies: insertPatient.allergies || null,\n      chronicConditions: insertPatient.chronicConditions || null,\n      currentMedications: insertPatient.currentMedications || null,\n      familyHistory: insertPatient.familyHistory || null,\n      insuranceProvider: insertPatient.insuranceProvider || null,\n      insurancePolicyNumber: insertPatient.insurancePolicyNumber || null,\n      preferredBudgetRange: insertPatient.preferredBudgetRange || null,\n      address: insertPatient.address || null,\n      preferredLanguages: insertPatient.preferredLanguages || null,\n      communicationPreferences: insertPatient.communicationPreferences || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.patients.set(id, patient);\n    return patient;\n  }\n\n  async updatePatient(id: string, updates: Partial<Patient>): Promise<Patient | undefined> {\n    const patient = this.patients.get(id);\n    if (!patient) return undefined;\n    \n    const updatedPatient = { ...patient, ...updates, updatedAt: new Date() };\n    this.patients.set(id, updatedPatient);\n    return updatedPatient;\n  }\n\n  // Consultation Management Implementation\n  async getConsultation(id: string): Promise<Consultation | undefined> {\n    return this.consultations.get(id);\n  }\n\n  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {\n    const id = randomUUID();\n    const consultation: Consultation = {\n      ...insertConsultation,\n      id,\n      symptoms: insertConsultation.symptoms || null,\n      vitalSigns: insertConsultation.vitalSigns || null,\n      clinicalNotes: insertConsultation.clinicalNotes || null,\n      diagnosis: insertConsultation.diagnosis || null,\n      treatmentPlan: insertConsultation.treatmentPlan || null,\n      prescriptions: insertConsultation.prescriptions || null,\n      followUpInstructions: insertConsultation.followUpInstructions || null,\n      referrals: insertConsultation.referrals || null,\n      sessionStarted: null,\n      sessionEnded: null,\n      status: \"scheduled\",\n      paymentStatus: \"pending\",\n      patientRating: null,\n      patientFeedback: null,\n      doctorRating: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.consultations.set(id, consultation);\n    return consultation;\n  }\n\n  async updateConsultation(id: string, updates: Partial<Consultation>): Promise<Consultation | undefined> {\n    const consultation = this.consultations.get(id);\n    if (!consultation) return undefined;\n    \n    const updatedConsultation = { ...consultation, ...updates, updatedAt: new Date() };\n    this.consultations.set(id, updatedConsultation);\n    return updatedConsultation;\n  }\n\n  async getPatientConsultations(patientId: string): Promise<Consultation[]> {\n    return Array.from(this.consultations.values()).filter(\n      consultation => consultation.patientId === patientId\n    );\n  }\n\n  async getDoctorConsultations(doctorId: string): Promise<Consultation[]> {\n    return Array.from(this.consultations.values()).filter(\n      consultation => consultation.doctorId === doctorId\n    );\n  }\n\n  // Medical Document Management Implementation\n  async getMedicalDocument(id: string): Promise<MedicalDocument | undefined> {\n    return this.medicalDocuments.get(id);\n  }\n\n  async createMedicalDocument(insertDocument: InsertMedicalDocument): Promise<MedicalDocument> {\n    const id = randomUUID();\n    const document: MedicalDocument = {\n      ...insertDocument,\n      id,\n      consultationId: insertDocument.consultationId || null,\n      fileSize: insertDocument.fileSize || null,\n      mimeType: insertDocument.mimeType || null,\n      documentDate: insertDocument.documentDate || null,\n      issuingProvider: insertDocument.issuingProvider || null,\n      documentSummary: insertDocument.documentSummary || null,\n      tags: insertDocument.tags || null,\n      sharedWith: insertDocument.sharedWith || null,\n      expiryDate: insertDocument.expiryDate || null,\n      isActive: true,\n      createdAt: new Date()\n    };\n    this.medicalDocuments.set(id, document);\n    return document;\n  }\n\n  async getPatientDocuments(patientId: string): Promise<MedicalDocument[]> {\n    return Array.from(this.medicalDocuments.values()).filter(\n      document => document.patientId === patientId && document.isActive\n    );\n  }\n\n  // Health Metrics Implementation\n  async createHealthMetric(insertMetric: InsertHealthMetric): Promise<HealthMetric> {\n    const id = randomUUID();\n    const metric: HealthMetric = {\n      ...insertMetric,\n      id,\n      deviceId: insertMetric.deviceId || null,\n      notes: insertMetric.notes || null,\n      alertLevel: insertMetric.alertLevel || null,\n      isAbnormal: false,\n      createdAt: new Date()\n    };\n    this.healthMetrics.set(id, metric);\n    return metric;\n  }\n\n  async getPatientHealthMetrics(patientId: string, metricType?: string): Promise<HealthMetric[]> {\n    return Array.from(this.healthMetrics.values()).filter(\n      metric => metric.patientId === patientId && \n      (!metricType || metric.metricType === metricType)\n    );\n  }\n\n  // Care Plan Implementation\n  async getCarePlan(id: string): Promise<CarePlan | undefined> {\n    return this.carePlans.get(id);\n  }\n\n  async createCarePlan(insertCarePlan: InsertCarePlan): Promise<CarePlan> {\n    const id = randomUUID();\n    const carePlan: CarePlan = {\n      ...insertCarePlan,\n      id,\n      description: insertCarePlan.description || null,\n      goals: insertCarePlan.goals || null,\n      medications: insertCarePlan.medications || null,\n      lifestyle: insertCarePlan.lifestyle || null,\n      monitoringSchedule: insertCarePlan.monitoringSchedule || null,\n      followUpSchedule: insertCarePlan.followUpSchedule || null,\n      endDate: insertCarePlan.endDate || null,\n      adherenceScore: insertCarePlan.adherenceScore || null,\n      lastReviewed: null,\n      status: \"active\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.carePlans.set(id, carePlan);\n    return carePlan;\n  }\n\n  async getPatientCarePlans(patientId: string): Promise<CarePlan[]> {\n    return Array.from(this.carePlans.values()).filter(\n      carePlan => carePlan.patientId === patientId\n    );\n  }\n\n  // Emergency Case Implementation\n  async createEmergencyCase(insertEmergencyCase: InsertEmergencyCase): Promise<EmergencyCase> {\n    const id = randomUUID();\n    const emergencyCase: EmergencyCase = {\n      ...insertEmergencyCase,\n      id,\n      assignedDoctorId: insertEmergencyCase.assignedDoctorId || null,\n      symptoms: insertEmergencyCase.symptoms || null,\n      vitalSigns: insertEmergencyCase.vitalSigns || null,\n      location: insertEmergencyCase.location || null,\n      emergencyContact: insertEmergencyCase.emergencyContact || null,\n      responseTime: null,\n      resolutionTime: null,\n      escalatedTo: null,\n      notes: null,\n      resolvedAt: null,\n      status: \"open\",\n      createdAt: new Date()\n    };\n    this.emergencyCases.set(id, emergencyCase);\n    return emergencyCase;\n  }\n\n  async getEmergencyCase(id: string): Promise<EmergencyCase | undefined> {\n    return this.emergencyCases.get(id);\n  }\n\n  async getActiveEmergencyCases(): Promise<EmergencyCase[]> {\n    return Array.from(this.emergencyCases.values()).filter(\n      emergencyCase => emergencyCase.status !== \"resolved\"\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15991},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb, decimal, date, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Core User Management - Updated for Replit Auth compatibility\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Healthcare-specific fields\n  userType: text(\"user_type\"), // 'patient', 'doctor', 'admin'\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Doctor Profiles with Medical Credentials\nexport const doctors = pgTable(\"doctors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  fullName: text(\"full_name\").notNull(),\n  profilePhoto: text(\"profile_photo\"),\n  // Medical Credentials\n  medicalLicense: text(\"medical_license\").notNull(),\n  licenseState: text(\"license_state\").notNull(),\n  licenseExpiry: date(\"license_expiry\").notNull(),\n  // Specialization Details\n  primarySpecialty: text(\"primary_specialty\").notNull(),\n  subSpecialties: text(\"sub_specialties\").array(),\n  certifications: jsonb(\"certifications\"), // Board certifications, fellowships\n  // Education & Experience\n  medicalSchool: text(\"medical_school\").notNull(),\n  residency: text(\"residency\"),\n  fellowship: text(\"fellowship\"),\n  yearsOfExperience: integer(\"years_of_experience\").notNull(),\n  // Practice Details\n  consultationFee: decimal(\"consultation_fee\", { precision: 10, scale: 2 }).notNull(),\n  availableHours: jsonb(\"available_hours\"), // Weekly schedule\n  languages: text(\"languages\").array(),\n  // Location & Practice\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  hospitalAffiliations: text(\"hospital_affiliations\").array(),\n  // Professional Details\n  bio: text(\"bio\"),\n  specialInterests: text(\"special_interests\").array(),\n  researchPublications: jsonb(\"research_publications\"),\n  awards: jsonb(\"awards\"),\n  // Platform Metrics\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalConsultations: integer(\"total_consultations\").default(0),\n  totalReviews: integer(\"total_reviews\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  verificationStatus: text(\"verification_status\").default(\"pending\"), // pending, verified, suspended\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comprehensive Patient Profiles\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  fullName: text(\"full_name\").notNull(),\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  gender: text(\"gender\").notNull(),\n  phoneNumber: text(\"phone_number\").notNull(),\n  emergencyContact: jsonb(\"emergency_contact\"),\n  // Medical Information\n  bloodGroup: text(\"blood_group\"),\n  height: integer(\"height\"), // in cm\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }), // in kg\n  allergies: text(\"allergies\").array(),\n  chronicConditions: text(\"chronic_conditions\").array(),\n  currentMedications: jsonb(\"current_medications\"),\n  familyHistory: jsonb(\"family_history\"),\n  // Insurance & Financial\n  insuranceProvider: text(\"insurance_provider\"),\n  insurancePolicyNumber: text(\"insurance_policy_number\"),\n  preferredBudgetRange: text(\"preferred_budget_range\"), // basic, specialist, premium\n  // Address\n  address: jsonb(\"address\"),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  pincode: text(\"pincode\").notNull(),\n  // Preferences\n  preferredLanguages: text(\"preferred_languages\").array(),\n  communicationPreferences: jsonb(\"communication_preferences\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Consultations with Medical Context\nexport const consultations = pgTable(\"consultations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => doctors.id).notNull(),\n  // Scheduling\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  consultationType: text(\"consultation_type\").notNull(), // video, audio, chat\n  // Medical Details\n  chiefComplaint: text(\"chief_complaint\").notNull(),\n  symptoms: text(\"symptoms\").array(),\n  vitalSigns: jsonb(\"vital_signs\"),\n  clinicalNotes: text(\"clinical_notes\"),\n  diagnosis: text(\"diagnosis\").array(),\n  treatmentPlan: text(\"treatment_plan\"),\n  prescriptions: jsonb(\"prescriptions\"),\n  followUpInstructions: text(\"follow_up_instructions\"),\n  referrals: jsonb(\"referrals\"),\n  // Session Details\n  sessionStarted: timestamp(\"session_started\"),\n  sessionEnded: timestamp(\"session_ended\"),\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, in_progress, completed, cancelled, no_show\n  // Financial\n  consultationFee: decimal(\"consultation_fee\", { precision: 10, scale: 2 }).notNull(),\n  platformFee: decimal(\"platform_fee\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentStatus: text(\"payment_status\").default(\"pending\"),\n  // Quality & Feedback\n  patientRating: integer(\"patient_rating\"), // 1-5\n  patientFeedback: text(\"patient_feedback\"),\n  doctorRating: integer(\"doctor_rating\"), // 1-5 (doctor rates patient)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Medical Documents & Reports\nexport const medicalDocuments = pgTable(\"medical_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  consultationId: varchar(\"consultation_id\").references(() => consultations.id),\n  documentType: text(\"document_type\").notNull(), // prescription, lab_report, imaging, discharge_summary\n  fileName: text(\"file_name\").notNull(),\n  fileUrl: text(\"file_url\").notNull(),\n  fileSize: integer(\"file_size\"),\n  mimeType: text(\"mime_type\"),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  // Medical Context\n  documentDate: date(\"document_date\"),\n  issuingProvider: text(\"issuing_provider\"),\n  documentSummary: text(\"document_summary\"),\n  tags: text(\"tags\").array(),\n  // Access Control\n  sharedWith: varchar(\"shared_with\").array(), // user IDs who have access\n  expiryDate: date(\"expiry_date\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Health Monitoring for Chronic Care\nexport const healthMetrics = pgTable(\"health_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  metricType: text(\"metric_type\").notNull(), // blood_pressure, blood_sugar, weight, temperature\n  value: jsonb(\"value\").notNull(), // flexible structure for different metric types\n  unit: text(\"unit\").notNull(),\n  recordedAt: timestamp(\"recorded_at\").notNull(),\n  recordedBy: text(\"recorded_by\").notNull(), // patient, doctor, device\n  deviceId: text(\"device_id\"), // if recorded by IoT device\n  notes: text(\"notes\"),\n  isAbnormal: boolean(\"is_abnormal\").default(false),\n  alertLevel: text(\"alert_level\"), // normal, warning, critical\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Care Plans for Chronic Disease Management\nexport const carePlans = pgTable(\"care_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => doctors.id).notNull(),\n  condition: text(\"condition\").notNull(),\n  planTitle: text(\"plan_title\").notNull(),\n  description: text(\"description\"),\n  goals: jsonb(\"goals\"),\n  medications: jsonb(\"medications\"),\n  lifestyle: jsonb(\"lifestyle\"), // diet, exercise, habits\n  monitoringSchedule: jsonb(\"monitoring_schedule\"),\n  followUpSchedule: jsonb(\"follow_up_schedule\"),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, paused, cancelled\n  adherenceScore: decimal(\"adherence_score\", { precision: 3, scale: 1 }), // 0-100\n  lastReviewed: timestamp(\"last_reviewed\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Emergency Cases with Priority Handling\nexport const emergencyCases = pgTable(\"emergency_cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  assignedDoctorId: varchar(\"assigned_doctor_id\").references(() => doctors.id),\n  emergencyType: text(\"emergency_type\").notNull(), // critical, urgent, semi_urgent\n  triageLevel: integer(\"triage_level\").notNull(), // 1-5 priority\n  symptoms: text(\"symptoms\").array(),\n  vitalSigns: jsonb(\"vital_signs\"),\n  location: jsonb(\"location\"),\n  contactNumber: text(\"contact_number\").notNull(),\n  emergencyContact: jsonb(\"emergency_contact\"),\n  status: text(\"status\").notNull().default(\"open\"), // open, assigned, in_progress, resolved, escalated\n  responseTime: integer(\"response_time\"), // minutes from creation to first contact\n  resolutionTime: integer(\"resolution_time\"), // minutes from creation to resolution\n  escalatedTo: text(\"escalated_to\"), // hospital, ambulance, specialist\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Schema exports for forms and validation\n// Replit Auth specific types\nexport type UpsertUser = typeof users.$inferInsert;\n\n// Healthcare-specific user creation schema\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  userType: true,\n}).extend({\n  userType: z.enum([\"patient\", \"doctor\", \"admin\"]).optional(),\n});\n\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  rating: true,\n  totalConsultations: true,\n  totalReviews: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  sessionStarted: true,\n  sessionEnded: true,\n});\n\nexport const insertMedicalDocumentSchema = createInsertSchema(medicalDocuments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHealthMetricSchema = createInsertSchema(healthMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCarePlanSchema = createInsertSchema(carePlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmergencyCaseSchema = createInsertSchema(emergencyCases).omit({\n  id: true,\n  createdAt: true,\n  resolvedAt: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type MedicalDocument = typeof medicalDocuments.$inferSelect;\nexport type InsertMedicalDocument = z.infer<typeof insertMedicalDocumentSchema>;\nexport type HealthMetric = typeof healthMetrics.$inferSelect;\nexport type InsertHealthMetric = z.infer<typeof insertHealthMetricSchema>;\nexport type CarePlan = typeof carePlans.$inferSelect;\nexport type InsertCarePlan = z.infer<typeof insertCarePlanSchema>;\nexport type EmergencyCase = typeof emergencyCases.$inferSelect;\nexport type InsertEmergencyCase = z.infer<typeof insertEmergencyCaseSchema>;\n","size_bytes":12687},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/Home\";\nimport Landing from \"@/pages/Landing\";\nimport DoctorProfile from \"@/pages/DoctorProfile\";\nimport PatientDashboard from \"@/pages/PatientDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/doctor/:id\" component={DoctorProfile} />\n          <Route path=\"/dashboard\" component={PatientDashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1210},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 210 15% 15%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 210 15% 15%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 210 15% 15%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 180 65% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 180 12% 88%;\n\n  --sidebar-accent-foreground: 210 15% 15%;\n\n  --sidebar-ring: 180 65% 45%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 210 15% 15%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 180 65% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 90%;\n\n  --secondary-foreground: 210 15% 15%;\n\n  --muted: 0 0% 90%;\n\n  --muted-foreground: 210 10% 45%;\n\n  --accent: 180 15% 88%;\n\n  --accent-foreground: 210 15% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 82%;\n  --ring: 180 65% 45%;\n  --chart-1: 210 70% 25%;\n  --chart-2: 180 65% 45%;\n  --chart-3: 120 60% 50%;\n  --chart-4: 25 85% 55%;\n  --chart-5: 270 60% 55%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 15% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 210 15% 18%;\n\n  --card: 210 15% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 210 15% 20%;\n\n  --sidebar: 210 15% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 210 15% 18%;\n\n  --sidebar-primary: 180 65% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 15% 16%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 180 65% 45%;\n\n  --popover: 210 15% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 210 15% 22%;\n\n  --primary: 180 65% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 210 15% 16%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 210 15% 14%;\n\n  --muted-foreground: 210 15% 70%;\n\n  --accent: 210 15% 14%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 210 15% 28%;\n  --ring: 180 65% 45%;\n  --chart-1: 210 70% 75%;\n  --chart-2: 180 65% 70%;\n  --chart-3: 120 60% 70%;\n  --chart-4: 25 85% 75%;\n  --chart-5: 270 60% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10384},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar, Clock, Video, CreditCard, Shield, X } from \"lucide-react\";\n\ninterface Doctor {\n  id: string;\n  name: string;\n  specialty: string;\n  consultationFee: number;\n  photo?: string;\n}\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  doctor: Doctor | null;\n  onConfirmBooking?: (bookingData: any) => void;\n}\n\nexport default function BookingModal({ isOpen, onClose, doctor, onConfirmBooking }: BookingModalProps) {\n  const [step, setStep] = useState(1);\n  const [bookingData, setBookingData] = useState({\n    date: \"\",\n    time: \"\",\n    symptoms: \"\",\n    patientName: \"\",\n    patientAge: \"\",\n    patientPhone: \"\",\n    patientEmail: \"\",\n    consultationType: \"video\"\n  });\n\n  const handleNext = () => {\n    if (step < 3) {\n      setStep(step + 1);\n      console.log('Moved to step:', step + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (step > 1) {\n      setStep(step - 1);\n      console.log('Moved to step:', step - 1);\n    }\n  };\n\n  const handleConfirmBooking = () => {\n    onConfirmBooking?.(bookingData);\n    console.log('Booking confirmed:', bookingData);\n    onClose();\n    setStep(1);\n  };\n\n  const updateBookingData = (field: string, value: string) => {\n    setBookingData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (!doctor) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={doctor.photo} alt={doctor.name} />\n              <AvatarFallback>\n                {doctor.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div>Book Consultation</div>\n              <div className=\"text-sm font-normal text-muted-foreground\">\n                Dr. {doctor.name} - {doctor.specialty}\n              </div>\n            </div>\n          </DialogTitle>\n          \n          {/* Progress Indicator */}\n          <div className=\"flex items-center gap-2 mt-4\">\n            {[1, 2, 3].map((stepNum) => (\n              <div key={stepNum} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium ${\n                  step >= stepNum ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                }`}>\n                  {stepNum}\n                </div>\n                {stepNum < 3 && <div className=\"w-8 h-0.5 bg-muted mx-1\" />}\n              </div>\n            ))}\n          </div>\n        </DialogHeader>\n\n        {/* Step 1: Date & Time */}\n        {step === 1 && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"date\">Preferred Date</Label>\n                <Input\n                  id=\"date\"\n                  type=\"date\"\n                  value={bookingData.date}\n                  onChange={(e) => updateBookingData('date', e.target.value)}\n                  data-testid=\"input-booking-date\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"time\">Preferred Time</Label>\n                <Select value={bookingData.time} onValueChange={(value) => updateBookingData('time', value)}>\n                  <SelectTrigger data-testid=\"select-booking-time\">\n                    <SelectValue placeholder=\"Select time\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"09:00\">09:00 AM</SelectItem>\n                    <SelectItem value=\"10:00\">10:00 AM</SelectItem>\n                    <SelectItem value=\"11:00\">11:00 AM</SelectItem>\n                    <SelectItem value=\"14:00\">02:00 PM</SelectItem>\n                    <SelectItem value=\"15:00\">03:00 PM</SelectItem>\n                    <SelectItem value=\"16:00\">04:00 PM</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"consultation-type\">Consultation Type</Label>\n              <Select value={bookingData.consultationType} onValueChange={(value) => updateBookingData('consultationType', value)}>\n                <SelectTrigger data-testid=\"select-consultation-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"video\">\n                    <div className=\"flex items-center gap-2\">\n                      <Video className=\"h-4 w-4\" />\n                      Video Call\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"audio\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4\" />\n                      Audio Call\n                    </div>\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"symptoms\">Symptoms or Reason for Visit</Label>\n              <Textarea\n                id=\"symptoms\"\n                placeholder=\"Briefly describe your symptoms or reason for consultation...\"\n                value={bookingData.symptoms}\n                onChange={(e) => updateBookingData('symptoms', e.target.value)}\n                data-testid=\"textarea-symptoms\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Patient Details */}\n        {step === 2 && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"patient-name\">Patient Name</Label>\n                <Input\n                  id=\"patient-name\"\n                  value={bookingData.patientName}\n                  onChange={(e) => updateBookingData('patientName', e.target.value)}\n                  placeholder=\"Full name\"\n                  data-testid=\"input-patient-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"patient-age\">Age</Label>\n                <Input\n                  id=\"patient-age\"\n                  type=\"number\"\n                  value={bookingData.patientAge}\n                  onChange={(e) => updateBookingData('patientAge', e.target.value)}\n                  placeholder=\"Age\"\n                  data-testid=\"input-patient-age\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"patient-phone\">Phone Number</Label>\n              <Input\n                id=\"patient-phone\"\n                type=\"tel\"\n                value={bookingData.patientPhone}\n                onChange={(e) => updateBookingData('patientPhone', e.target.value)}\n                placeholder=\"+91 XXXXX XXXXX\"\n                data-testid=\"input-patient-phone\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"patient-email\">Email Address</Label>\n              <Input\n                id=\"patient-email\"\n                type=\"email\"\n                value={bookingData.patientEmail}\n                onChange={(e) => updateBookingData('patientEmail', e.target.value)}\n                placeholder=\"your.email@example.com\"\n                data-testid=\"input-patient-email\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Step 3: Payment Summary */}\n        {step === 3 && (\n          <div className=\"space-y-4\">\n            <div className=\"bg-muted/50 p-4 rounded-lg space-y-3\">\n              <h3 className=\"font-medium\">Booking Summary</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Consultation Fee</span>\n                  <span>₹{doctor.consultationFee}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Platform Fee</span>\n                  <span>₹50</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>GST (18%)</span>\n                  <span>₹{Math.round((doctor.consultationFee + 50) * 0.18)}</span>\n                </div>\n                <hr />\n                <div className=\"flex justify-between font-medium\">\n                  <span>Total Amount</span>\n                  <span>₹{Math.round((doctor.consultationFee + 50) * 1.18)}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Shield className=\"h-4 w-4\" />\n              <span>Your payment is secure and encrypted</span>\n            </div>\n\n            <div className=\"bg-green-50 p-3 rounded-lg border border-green-200\">\n              <div className=\"text-sm font-medium text-green-800\">\n                100% Refund Policy\n              </div>\n              <div className=\"text-xs text-green-600\">\n                Full refund if cancelled 2+ hours before appointment\n              </div>\n            </div>\n          </div>\n        )}\n\n        <DialogFooter className=\"flex gap-2\">\n          {step > 1 && (\n            <Button variant=\"outline\" onClick={handleBack} data-testid=\"button-back\">\n              Back\n            </Button>\n          )}\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n            Cancel\n          </Button>\n          {step < 3 ? (\n            <Button onClick={handleNext} data-testid=\"button-next\">\n              Next\n            </Button>\n          ) : (\n            <Button onClick={handleConfirmBooking} data-testid=\"button-confirm-booking\">\n              <CreditCard className=\"h-4 w-4 mr-2\" />\n              Pay & Book\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10549},"client/src/components/BudgetTierCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Check, Star, ArrowRight } from \"lucide-react\";\n\ninterface BudgetTier {\n  id: string;\n  title: string;\n  price: string;\n  description: string;\n  features: string[];\n  popular?: boolean;\n  icon: React.ReactNode;\n}\n\ninterface BudgetTierCardProps {\n  tier: BudgetTier;\n  onSelect?: (tier: BudgetTier) => void;\n}\n\nexport default function BudgetTierCard({ tier, onSelect }: BudgetTierCardProps) {\n  const handleSelect = () => {\n    onSelect?.(tier);\n    console.log('Budget tier selected:', tier.title);\n  };\n\n  return (\n    <Card className={`relative hover-elevate transition-all duration-200 ${\n      tier.popular ? 'ring-2 ring-primary' : ''\n    }`}>\n      {tier.popular && (\n        <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary\">\n          <Star className=\"h-3 w-3 mr-1\" />\n          Most Popular\n        </Badge>\n      )}\n      \n      <CardHeader className=\"text-center pb-4\">\n        <div className=\"flex justify-center mb-3\">\n          <div className=\"p-3 rounded-lg bg-primary/10 text-primary\">\n            {tier.icon}\n          </div>\n        </div>\n        <h3 className=\"text-xl font-semibold\">{tier.title}</h3>\n        <div className=\"text-3xl font-bold text-primary\">{tier.price}</div>\n        <p className=\"text-muted-foreground text-sm\">{tier.description}</p>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        {tier.features.map((feature, index) => (\n          <div key={index} className=\"flex items-start gap-2\">\n            <Check className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n            <span className=\"text-sm\">{feature}</span>\n          </div>\n        ))}\n      </CardContent>\n\n      <CardFooter>\n        <Button \n          onClick={handleSelect}\n          className=\"w-full group\"\n          variant={tier.popular ? \"default\" : \"outline\"}\n          data-testid={`button-select-${tier.id}`}\n        >\n          Choose {tier.title}\n          <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":2254},"client/src/components/CareCoordination.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Users, \n  UserPlus, \n  MessageCircle, \n  FileText, \n  Clock, \n  CheckCircle,\n  ArrowRight,\n  Stethoscope,\n  Heart,\n  Brain,\n  Eye,\n  Activity,\n  Calendar,\n  Phone,\n  Video,\n  Send,\n  Plus,\n  Filter,\n  Search,\n  AlertTriangle,\n  Info,\n  X\n} from \"lucide-react\";\n\ninterface CareTeamMember {\n  id: string;\n  name: string;\n  role: 'primary_physician' | 'specialist' | 'nurse' | 'therapist' | 'pharmacist' | 'care_coordinator';\n  specialty: string;\n  profilePhoto?: string;\n  contactInfo: {\n    phone: string;\n    email: string;\n    hospital: string;\n  };\n  joinedDate: string;\n  isActive: boolean;\n  lastActivity: string;\n}\n\ninterface Referral {\n  id: string;\n  fromDoctorId: string;\n  fromDoctorName: string;\n  toDoctorId: string;\n  toDoctorName: string;\n  specialty: string;\n  priority: 'routine' | 'urgent' | 'emergency';\n  reason: string;\n  clinicalNotes: string;\n  attachments: string[];\n  status: 'pending' | 'accepted' | 'declined' | 'completed';\n  requestedDate: string;\n  appointmentDate?: string;\n  responseNotes?: string;\n}\n\ninterface CommunicationThread {\n  id: string;\n  subject: string;\n  participants: string[]; // doctor IDs\n  messages: {\n    id: string;\n    senderId: string;\n    senderName: string;\n    content: string;\n    timestamp: string;\n    attachments?: string[];\n    isUrgent: boolean;\n  }[];\n  status: 'active' | 'archived';\n  createdAt: string;\n  lastActivity: string;\n}\n\ninterface HandoffRecord {\n  id: string;\n  fromDoctorId: string;\n  fromDoctorName: string;\n  toDoctorId: string;\n  toDoctorName: string;\n  patientCondition: string;\n  handoffReason: string;\n  clinicalSummary: string;\n  currentMedications: string[];\n  pendingTasks: string[];\n  urgentAlerts: string[];\n  handoffDate: string;\n  status: 'pending' | 'accepted' | 'completed';\n}\n\ninterface CareCoordinationProps {\n  patientId: string;\n  careTeam: CareTeamMember[];\n  referrals: Referral[];\n  communications: CommunicationThread[];\n  handoffs: HandoffRecord[];\n  onAddTeamMember?: (member: Partial<CareTeamMember>) => void;\n  onCreateReferral?: (referral: Partial<Referral>) => void;\n  onSendMessage?: (threadId: string, message: string, isUrgent: boolean) => void;\n  onHandoffPatient?: (handoff: Partial<HandoffRecord>) => void;\n}\n\nconst roleColors = {\n  primary_physician: 'bg-blue-50 text-blue-700 border-blue-200',\n  specialist: 'bg-purple-50 text-purple-700 border-purple-200',\n  nurse: 'bg-green-50 text-green-700 border-green-200',\n  therapist: 'bg-orange-50 text-orange-700 border-orange-200',\n  pharmacist: 'bg-yellow-50 text-yellow-700 border-yellow-200',\n  care_coordinator: 'bg-indigo-50 text-indigo-700 border-indigo-200'\n};\n\nconst priorityColors = {\n  routine: 'bg-green-50 text-green-700 border-green-200',\n  urgent: 'bg-orange-50 text-orange-700 border-orange-200',\n  emergency: 'bg-red-50 text-red-700 border-red-200'\n};\n\nconst statusColors = {\n  pending: 'bg-yellow-50 text-yellow-700 border-yellow-200',\n  accepted: 'bg-blue-50 text-blue-700 border-blue-200',\n  declined: 'bg-red-50 text-red-700 border-red-200',\n  completed: 'bg-green-50 text-green-700 border-green-200',\n  active: 'bg-blue-50 text-blue-700 border-blue-200',\n  archived: 'bg-gray-50 text-gray-700 border-gray-200'\n};\n\nexport default function CareCoordination({ \n  patientId,\n  careTeam,\n  referrals,\n  communications,\n  handoffs,\n  onAddTeamMember,\n  onCreateReferral,\n  onSendMessage,\n  onHandoffPatient \n}: CareCoordinationProps) {\n  \n  const [activeTab, setActiveTab] = useState(\"team\");\n  const [showAddMember, setShowAddMember] = useState(false);\n  const [showReferral, setShowReferral] = useState(false);\n  const [showHandoff, setShowHandoff] = useState(false);\n  const [selectedThread, setSelectedThread] = useState<CommunicationThread | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [isUrgent, setIsUrgent] = useState(false);\n\n  const handleSendMessage = () => {\n    if (selectedThread && newMessage.trim()) {\n      onSendMessage?.(selectedThread.id, newMessage, isUrgent);\n      setNewMessage(\"\");\n      setIsUrgent(false);\n      console.log('Message sent:', { threadId: selectedThread.id, message: newMessage, isUrgent });\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'primary_physician': return <Stethoscope className=\"h-4 w-4\" />;\n      case 'specialist': return <Heart className=\"h-4 w-4\" />;\n      case 'nurse': return <Users className=\"h-4 w-4\" />;\n      case 'therapist': return <Activity className=\"h-4 w-4\" />;\n      case 'pharmacist': return <Brain className=\"h-4 w-4\" />;\n      case 'care_coordinator': return <UserPlus className=\"h-4 w-4\" />;\n      default: return <Users className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatRole = (role: string) => {\n    return role.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-6 w-6\" />\n                Care Team Coordination\n              </CardTitle>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage care team, referrals, and communication for comprehensive patient care\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowReferral(true)}\n                data-testid=\"button-create-referral\"\n              >\n                <ArrowRight className=\"h-4 w-4 mr-2\" />\n                Create Referral\n              </Button>\n              <Button \n                onClick={() => setShowAddMember(true)}\n                data-testid=\"button-add-team-member\"\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add Team Member\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Care Coordination Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"team\">Care Team ({careTeam.length})</TabsTrigger>\n          <TabsTrigger value=\"referrals\">Referrals ({referrals.length})</TabsTrigger>\n          <TabsTrigger value=\"communications\">Messages ({communications.length})</TabsTrigger>\n          <TabsTrigger value=\"handoffs\">Handoffs ({handoffs.length})</TabsTrigger>\n          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n        </TabsList>\n\n        {/* Care Team Tab */}\n        <TabsContent value=\"team\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {careTeam.map((member) => (\n              <Card key={member.id} className=\"hover-elevate\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarImage src={member.profilePhoto} alt={member.name} />\n                        <AvatarFallback>\n                          {member.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold\">Dr. {member.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{member.specialty}</p>\n                      </div>\n                    </div>\n                    <Badge className={roleColors[member.role]}>\n                      {getRoleIcon(member.role)}\n                      <span className=\"ml-1\">{formatRole(member.role)}</span>\n                    </Badge>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-3 w-3 text-muted-foreground\" />\n                      <span>{member.contactInfo.phone}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Info className=\"h-3 w-3 text-muted-foreground\" />\n                      <span className=\"truncate\">{member.contactInfo.hospital}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                      <span>Last active: {member.lastActivity}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" data-testid={`button-message-${member.id}`}>\n                      <MessageCircle className=\"h-3 w-3 mr-1\" />\n                      Message\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" data-testid={`button-call-${member.id}`}>\n                      <Video className=\"h-3 w-3 mr-1\" />\n                      Call\n                    </Button>\n                  </div>\n\n                  {member.role === 'primary_physician' && (\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      onClick={() => setShowHandoff(true)}\n                      data-testid={`button-handoff-${member.id}`}\n                    >\n                      <ArrowRight className=\"h-3 w-3 mr-1\" />\n                      Patient Handoff\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Referrals Tab */}\n        <TabsContent value=\"referrals\" className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            {referrals.map((referral) => (\n              <Card key={referral.id}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold\">\n                        Referral to {referral.specialty}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        From Dr. {referral.fromDoctorName} to Dr. {referral.toDoctorName}\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge className={priorityColors[referral.priority]}>\n                        {referral.priority}\n                      </Badge>\n                      <Badge className={statusColors[referral.status]}>\n                        {referral.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Reason for Referral:</h4>\n                    <p className=\"text-sm\">{referral.reason}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">Clinical Notes:</h4>\n                    <p className=\"text-sm text-muted-foreground\">{referral.clinicalNotes}</p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>Requested: {referral.requestedDate}</span>\n                    </div>\n                    {referral.appointmentDate && (\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>Scheduled: {referral.appointmentDate}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {referral.status === 'pending' && (\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-approve-${referral.id}`}>\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-schedule-${referral.id}`}>\n                        <Calendar className=\"h-3 w-3 mr-1\" />\n                        Schedule\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Communications Tab */}\n        <TabsContent value=\"communications\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Thread List */}\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">Communication Threads</h3>\n              {communications.map((thread) => (\n                <Card \n                  key={thread.id} \n                  className={`cursor-pointer hover-elevate ${selectedThread?.id === thread.id ? 'border-primary' : ''}`}\n                  onClick={() => setSelectedThread(thread)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium\">{thread.subject}</h4>\n                      <Badge className={statusColors[thread.status]}>\n                        {thread.status}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {thread.participants.length} participants\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <span>Last activity: {thread.lastActivity}</span>\n                      <span>{thread.messages.length} messages</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Message Thread */}\n            {selectedThread && (\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-semibold\">{selectedThread.subject}</h3>\n                    <Button \n                      size=\"sm\" \n                      variant=\"ghost\"\n                      onClick={() => setSelectedThread(null)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  {/* Messages */}\n                  <div className=\"max-h-96 overflow-y-auto space-y-3\">\n                    {selectedThread.messages.map((message) => (\n                      <div key={message.id} className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium text-sm\">{message.senderName}</span>\n                          <span className=\"text-xs text-muted-foreground\">{message.timestamp}</span>\n                          {message.isUrgent && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                              Urgent\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm bg-muted/30 p-3 rounded-lg\">{message.content}</p>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Message Input */}\n                  <div className=\"border-t pt-4 space-y-3\">\n                    <Textarea\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      placeholder=\"Type your message...\"\n                      className=\"min-h-[80px]\"\n                      data-testid=\"textarea-new-message\"\n                    />\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"urgent\"\n                          checked={isUrgent}\n                          onChange={(e) => setIsUrgent(e.target.checked)}\n                          className=\"rounded\"\n                        />\n                        <label htmlFor=\"urgent\" className=\"text-sm\">Mark as urgent</label>\n                      </div>\n                      \n                      <Button \n                        size=\"sm\"\n                        onClick={handleSendMessage}\n                        disabled={!newMessage.trim()}\n                        data-testid=\"button-send-message\"\n                      >\n                        <Send className=\"h-3 w-3 mr-1\" />\n                        Send\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Handoffs Tab */}\n        <TabsContent value=\"handoffs\" className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            {handoffs.map((handoff) => (\n              <Card key={handoff.id}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold\">Patient Handoff</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        From Dr. {handoff.fromDoctorName} to Dr. {handoff.toDoctorName}\n                      </p>\n                    </div>\n                    <Badge className={statusColors[handoff.status]}>\n                      {handoff.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Patient Condition:</h4>\n                    <p className=\"text-sm\">{handoff.patientCondition}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">Handoff Reason:</h4>\n                    <p className=\"text-sm\">{handoff.handoffReason}</p>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Clinical Summary:</h4>\n                    <p className=\"text-sm text-muted-foreground\">{handoff.clinicalSummary}</p>\n                  </div>\n\n                  {handoff.urgentAlerts.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium mb-2 text-red-700\">Urgent Alerts:</h4>\n                      <div className=\"space-y-1\">\n                        {handoff.urgentAlerts.map((alert, index) => (\n                          <div key={index} className=\"flex items-center gap-2 text-sm text-red-700\">\n                            <AlertTriangle className=\"h-3 w-3\" />\n                            <span>{alert}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>Handoff Date: {handoff.handoffDate}</span>\n                    </div>\n                  </div>\n\n                  {handoff.status === 'pending' && (\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-accept-handoff-${handoff.id}`}>\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Accept Handoff\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-request-info-${handoff.id}`}>\n                        <MessageCircle className=\"h-3 w-3 mr-1\" />\n                        Request More Info\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Timeline Tab */}\n        <TabsContent value=\"timeline\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Care Coordination Timeline</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Timeline items would be rendered here */}\n                <div className=\"text-center text-muted-foreground py-8\">\n                  Care coordination timeline coming soon...\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Add Team Member Modal */}\n      {showAddMember && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Add Care Team Member</CardTitle>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  onClick={() => setShowAddMember(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"member-name\">Doctor Name</Label>\n                <Input\n                  id=\"member-name\"\n                  placeholder=\"Enter doctor's name\"\n                  data-testid=\"input-member-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"member-role\">Role</Label>\n                <Select>\n                  <SelectTrigger data-testid=\"select-member-role\">\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"primary_physician\">Primary Physician</SelectItem>\n                    <SelectItem value=\"specialist\">Specialist</SelectItem>\n                    <SelectItem value=\"nurse\">Nurse</SelectItem>\n                    <SelectItem value=\"therapist\">Therapist</SelectItem>\n                    <SelectItem value=\"pharmacist\">Pharmacist</SelectItem>\n                    <SelectItem value=\"care_coordinator\">Care Coordinator</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"member-specialty\">Specialty</Label>\n                <Input\n                  id=\"member-specialty\"\n                  placeholder=\"e.g., Cardiology, Neurology\"\n                  data-testid=\"input-member-specialty\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => {\n                    onAddTeamMember?.({});\n                    setShowAddMember(false);\n                  }}\n                  className=\"flex-1\"\n                  data-testid=\"button-add-member-confirm\"\n                >\n                  <UserPlus className=\"h-4 w-4 mr-2\" />\n                  Add Member\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowAddMember(false)}\n                  data-testid=\"button-add-member-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":25199},"client/src/components/DoctorCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, MapPin, Clock, Shield, Video, Calendar } from \"lucide-react\";\n\ninterface Doctor {\n  id: string;\n  name: string;\n  specialty: string;\n  experience: number;\n  rating: number;\n  reviewCount: number;\n  consultationFee: number;\n  location: string;\n  nextAvailable: string;\n  verified: boolean;\n  photo?: string;\n  languages: string[];\n  availableToday: boolean;\n}\n\ninterface DoctorCardProps {\n  doctor: Doctor;\n  onBookConsultation?: (doctor: Doctor) => void;\n  onViewProfile?: (doctor: Doctor) => void;\n}\n\nexport default function DoctorCard({ doctor, onBookConsultation, onViewProfile }: DoctorCardProps) {\n  const handleBookConsultation = () => {\n    onBookConsultation?.(doctor);\n    console.log('Book consultation with:', doctor.name);\n  };\n\n  const handleViewProfile = () => {\n    onViewProfile?.(doctor);\n    console.log('View profile of:', doctor.name);\n  };\n\n  return (\n    <Card className=\"hover-elevate transition-all duration-200\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"h-16 w-16\">\n            <AvatarImage src={doctor.photo} alt={doctor.name} />\n            <AvatarFallback className=\"text-lg font-semibold\">\n              {doctor.name.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 space-y-2\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                  Dr. {doctor.name}\n                  {doctor.verified && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <Shield className=\"h-3 w-3 mr-1\" />\n                      Verified\n                    </Badge>\n                  )}\n                </h3>\n                <p className=\"text-muted-foreground\">{doctor.specialty}</p>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-xl font-bold text-primary\">₹{doctor.consultationFee}</div>\n                <div className=\"text-xs text-muted-foreground\">per consultation</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-1\">\n                <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                <span className=\"font-medium\">{doctor.rating}</span>\n                <span>({doctor.reviewCount} reviews)</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <MapPin className=\"h-4 w-4\" />\n                <span>{doctor.location}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {doctor.experience} years exp.\n          </Badge>\n          {doctor.languages.map((lang) => (\n            <Badge key={lang} variant=\"outline\" className=\"text-xs\">\n              {lang}\n            </Badge>\n          ))}\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-1 text-muted-foreground\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Next available: {doctor.nextAvailable}</span>\n          </div>\n          {doctor.availableToday && (\n            <Badge variant=\"secondary\" className=\"text-xs bg-green-50 text-green-700\">\n              Available Today\n            </Badge>\n          )}\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleViewProfile}\n            className=\"flex-1\"\n            data-testid={`button-view-profile-${doctor.id}`}\n          >\n            View Profile\n          </Button>\n          <Button \n            onClick={handleBookConsultation}\n            size=\"sm\"\n            className=\"flex-1 group\"\n            data-testid={`button-book-${doctor.id}`}\n          >\n            <Video className=\"h-4 w-4 mr-2\" />\n            Book Now\n            <Calendar className=\"h-4 w-4 ml-2 group-hover:scale-110 transition-transform\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4673},"client/src/components/EmergencyTriageSystem.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  AlertTriangle, \n  Clock, \n  Heart, \n  Phone, \n  MapPin,\n  User,\n  Activity,\n  Zap,\n  Shield,\n  Ambulance,\n  Hospital,\n  Stethoscope,\n  Timer\n} from \"lucide-react\";\n\ninterface EmergencyCase {\n  id: string;\n  patientName: string;\n  age: number;\n  gender: string;\n  contactNumber: string;\n  location: {\n    address: string;\n    latitude?: number;\n    longitude?: number;\n  };\n  emergencyType: 'critical' | 'urgent' | 'semi_urgent';\n  triageLevel: 1 | 2 | 3 | 4 | 5; // 1 = Most critical\n  symptoms: string[];\n  vitalSigns: {\n    consciousness: 'alert' | 'confused' | 'unconscious';\n    breathing: 'normal' | 'difficulty' | 'absent';\n    circulation: 'normal' | 'weak' | 'absent';\n    bloodPressure?: string;\n    heartRate?: number;\n    temperature?: number;\n  };\n  chiefComplaint: string;\n  medicalHistory: string[];\n  allergies: string[];\n  currentMedications: string[];\n  emergencyContact: {\n    name: string;\n    relationship: string;\n    phone: string;\n  };\n  status: 'open' | 'assigned' | 'in_progress' | 'resolved' | 'escalated';\n  assignedDoctor?: string;\n  responseTime?: number; // in minutes\n  createdAt: string;\n  estimatedArrivalTime?: string;\n}\n\ninterface EmergencyTriageSystemProps {\n  onCreateEmergency?: (emergencyCase: Partial<EmergencyCase>) => void;\n  onAssignDoctor?: (caseId: string, doctorId: string) => void;\n  onEscalate?: (caseId: string, escalationType: string) => void;\n}\n\nconst triageLevels = [\n  { level: 1, name: \"Resuscitation\", color: \"bg-red-600 text-white\", maxWait: \"Immediate\" },\n  { level: 2, name: \"Emergency\", color: \"bg-red-500 text-white\", maxWait: \"10 minutes\" },\n  { level: 3, name: \"Urgent\", color: \"bg-orange-500 text-white\", maxWait: \"30 minutes\" },\n  { level: 4, name: \"Semi-urgent\", color: \"bg-yellow-500 text-white\", maxWait: \"60 minutes\" },\n  { level: 5, name: \"Non-urgent\", color: \"bg-green-500 text-white\", maxWait: \"120 minutes\" }\n];\n\nconst emergencySymptoms = [\n  \"Chest pain\", \"Difficulty breathing\", \"Severe bleeding\", \"Loss of consciousness\",\n  \"Severe allergic reaction\", \"Stroke symptoms\", \"Severe burns\", \"Poisoning\",\n  \"Severe trauma\", \"Cardiac arrest\", \"Seizure\", \"Severe abdominal pain\"\n];\n\nexport default function EmergencyTriageSystem({ \n  onCreateEmergency,\n  onAssignDoctor,\n  onEscalate \n}: EmergencyTriageSystemProps) {\n  \n  const [step, setStep] = useState(1);\n  const [emergencyData, setEmergencyData] = useState<Partial<EmergencyCase>>({\n    symptoms: [],\n    medicalHistory: [],\n    allergies: [],\n    currentMedications: [],\n    vitalSigns: {\n      consciousness: 'alert',\n      breathing: 'normal',\n      circulation: 'normal'\n    }\n  });\n\n  const [triageResult, setTriageResult] = useState<{\n    level: number;\n    urgency: string;\n    recommendedActions: string[];\n    estimatedResponseTime: string;\n  } | null>(null);\n\n  const updateEmergencyData = (field: string, value: any) => {\n    setEmergencyData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const updateVitalSigns = (field: string, value: any) => {\n    setEmergencyData(prev => ({\n      ...prev,\n      vitalSigns: { ...prev.vitalSigns, [field]: value }\n    }));\n  };\n\n  const addSymptom = (symptom: string) => {\n    if (!emergencyData.symptoms?.includes(symptom)) {\n      setEmergencyData(prev => ({\n        ...prev,\n        symptoms: [...(prev.symptoms || []), symptom]\n      }));\n    }\n  };\n\n  const removeSymptom = (symptom: string) => {\n    setEmergencyData(prev => ({\n      ...prev,\n      symptoms: prev.symptoms?.filter(s => s !== symptom) || []\n    }));\n  };\n\n  const calculateTriage = () => {\n    let triageScore = 5; // Start with lowest priority\n    \n    // Critical symptoms\n    const criticalSymptoms = [\n      \"Loss of consciousness\", \"Cardiac arrest\", \"Severe bleeding\", \n      \"Difficulty breathing\", \"Stroke symptoms\"\n    ];\n    \n    const urgentSymptoms = [\n      \"Chest pain\", \"Severe allergic reaction\", \"Seizure\", \"Severe burns\"\n    ];\n\n    // Check vitals\n    if (emergencyData.vitalSigns?.consciousness === 'unconscious' ||\n        emergencyData.vitalSigns?.breathing === 'absent' ||\n        emergencyData.vitalSigns?.circulation === 'absent') {\n      triageScore = 1;\n    } else if (emergencyData.vitalSigns?.consciousness === 'confused' ||\n               emergencyData.vitalSigns?.breathing === 'difficulty' ||\n               emergencyData.vitalSigns?.circulation === 'weak') {\n      triageScore = Math.min(triageScore, 2);\n    }\n\n    // Check symptoms\n    const hasCritical = emergencyData.symptoms?.some(symptom => \n      criticalSymptoms.some(critical => symptom.toLowerCase().includes(critical.toLowerCase()))\n    );\n    \n    const hasUrgent = emergencyData.symptoms?.some(symptom => \n      urgentSymptoms.some(urgent => symptom.toLowerCase().includes(urgent.toLowerCase()))\n    );\n\n    if (hasSupported) {\n      triageScore = Math.min(triageScore, 1);\n    } else if (hasUrgent) {\n      triageScore = Math.min(triageScore, 2);\n    } else if (emergencyData.symptoms && emergencyData.symptoms.length > 0) {\n      triageScore = Math.min(triageScore, 3);\n    }\n\n    const triageLevel = triageLevels.find(level => level.level === triageScore);\n    \n    let recommendedActions: string[] = [];\n    let estimatedResponseTime = \"\";\n\n    switch (triageScore) {\n      case 1:\n        recommendedActions = [\n          \"Immediate medical attention required\",\n          \"Call ambulance immediately\",\n          \"Prepare for emergency resuscitation\",\n          \"Alert trauma team\"\n        ];\n        estimatedResponseTime = \"Immediate - Doctor assigned within 30 seconds\";\n        break;\n      case 2:\n        recommendedActions = [\n          \"Urgent medical consultation needed\",\n          \"Fast-track to emergency specialist\",\n          \"Monitor vitals continuously\",\n          \"Prepare for potential escalation\"\n        ];\n        estimatedResponseTime = \"Within 5 minutes - Emergency specialist\";\n        break;\n      case 3:\n        recommendedActions = [\n          \"Priority consultation required\",\n          \"Regular monitoring needed\",\n          \"Schedule within 30 minutes\",\n          \"General emergency physician\"\n        ];\n        estimatedResponseTime = \"Within 15 minutes - Available doctor\";\n        break;\n      default:\n        recommendedActions = [\n          \"Standard consultation\",\n          \"Non-urgent assessment\",\n          \"Regular monitoring\",\n          \"Schedule within hour\"\n        ];\n        estimatedResponseTime = \"Within 60 minutes - General physician\";\n    }\n\n    setTriageResult({\n      level: triageScore,\n      urgency: triageLevel?.name || \"Unknown\",\n      recommendedActions,\n      estimatedResponseTime\n    });\n\n    // Update emergency data with triage results\n    setEmergencyData(prev => ({\n      ...prev,\n      triageLevel: triageScore as 1 | 2 | 3 | 4 | 5,\n      emergencyType: triageScore <= 2 ? 'critical' : triageScore <= 3 ? 'urgent' : 'semi_urgent'\n    }));\n  };\n\n  const handleSubmitEmergency = () => {\n    const finalEmergencyData = {\n      ...emergencyData,\n      id: `EMG-${Date.now()}`,\n      status: 'open' as const,\n      createdAt: new Date().toISOString()\n    };\n    \n    onCreateEmergency?.(finalEmergencyData);\n    console.log('Emergency case created:', finalEmergencyData);\n  };\n\n  const getTriageColor = (level: number) => {\n    const triageLevel = triageLevels.find(tl => tl.level === level);\n    return triageLevel?.color || \"bg-gray-500 text-white\";\n  };\n\n  if (triageResult) {\n    return (\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <AlertTriangle className=\"h-6 w-6\" />\n              Emergency Triage Assessment\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Triage Level */}\n            <div className={`p-6 rounded-lg ${getTriageColor(triageResult.level)}`}>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-2xl font-bold\">\n                    Level {triageResult.level}: {triageResult.urgency}\n                  </h2>\n                  <p className=\"text-lg opacity-90\">\n                    Maximum wait time: {triageLevels.find(tl => tl.level === triageResult.level)?.maxWait}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold\">{triageResult.estimatedResponseTime}</div>\n                  <div className=\"opacity-90\">Estimated Response</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Recommended Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Immediate Actions Required\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {triageResult.recommendedActions.map((action, index) => (\n                    <li key={index} className=\"flex items-start gap-3\">\n                      <div className=\"h-2 w-2 rounded-full bg-red-500 mt-2 flex-shrink-0\" />\n                      <span>{action}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Patient Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <User className=\"h-5 w-5\" />\n                    Patient Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 text-sm\">\n                  <div><strong>Name:</strong> {emergencyData.patientName}</div>\n                  <div><strong>Age:</strong> {emergencyData.age} years</div>\n                  <div><strong>Contact:</strong> {emergencyData.contactNumber}</div>\n                  <div><strong>Location:</strong> {emergencyData.location?.address}</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5\" />\n                    Vital Signs\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 text-sm\">\n                  <div><strong>Consciousness:</strong> {emergencyData.vitalSigns?.consciousness}</div>\n                  <div><strong>Breathing:</strong> {emergencyData.vitalSigns?.breathing}</div>\n                  <div><strong>Circulation:</strong> {emergencyData.vitalSigns?.circulation}</div>\n                  {emergencyData.vitalSigns?.heartRate && (\n                    <div><strong>Heart Rate:</strong> {emergencyData.vitalSigns.heartRate} bpm</div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Emergency Actions */}\n            <div className=\"flex gap-4\">\n              <Button \n                onClick={handleSubmitEmergency}\n                className=\"bg-red-600 hover:bg-red-700\"\n                data-testid=\"button-submit-emergency\"\n              >\n                <Ambulance className=\"h-4 w-4 mr-2\" />\n                Create Emergency Case\n              </Button>\n              \n              {triageResult.level <= 2 && (\n                <Button \n                  variant=\"outline\"\n                  className=\"border-red-300 text-red-700\"\n                  onClick={() => onEscalate?.(emergencyData.id || '', 'ambulance')}\n                  data-testid=\"button-call-ambulance\"\n                >\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  Call Ambulance\n                </Button>\n              )}\n              \n              <Button \n                variant=\"outline\"\n                onClick={() => { setTriageResult(null); setStep(1); }}\n                data-testid=\"button-restart-triage\"\n              >\n                Start New Case\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <Card className=\"border-red-200\">\n        <CardHeader className=\"bg-red-50 border-b border-red-200\">\n          <CardTitle className=\"flex items-center gap-2 text-red-800\">\n            <AlertTriangle className=\"h-6 w-6\" />\n            Emergency Medical Triage System\n          </CardTitle>\n          <p className=\"text-red-600\">\n            24/7 Emergency Assessment • Response within minutes • Professional medical triage\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"p-6\">\n          {/* Step 1: Patient Information */}\n          {step === 1 && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold\">Patient Information</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"patient-name\">Patient Name *</Label>\n                  <Input\n                    id=\"patient-name\"\n                    value={emergencyData.patientName || \"\"}\n                    onChange={(e) => updateEmergencyData('patientName', e.target.value)}\n                    placeholder=\"Full name\"\n                    data-testid=\"input-patient-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"age\">Age *</Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    value={emergencyData.age || \"\"}\n                    onChange={(e) => updateEmergencyData('age', parseInt(e.target.value))}\n                    placeholder=\"Age in years\"\n                    data-testid=\"input-age\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"gender\">Gender</Label>\n                  <Select \n                    value={emergencyData.gender || \"\"} \n                    onValueChange={(value) => updateEmergencyData('gender', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-gender\">\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"contact\">Contact Number *</Label>\n                  <Input\n                    id=\"contact\"\n                    value={emergencyData.contactNumber || \"\"}\n                    onChange={(e) => updateEmergencyData('contactNumber', e.target.value)}\n                    placeholder=\"+91 XXXXX XXXXX\"\n                    data-testid=\"input-contact\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"location\">Current Location *</Label>\n                <Textarea\n                  id=\"location\"\n                  value={emergencyData.location?.address || \"\"}\n                  onChange={(e) => updateEmergencyData('location', { address: e.target.value })}\n                  placeholder=\"Full address or nearest landmark\"\n                  data-testid=\"textarea-location\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Emergency Details */}\n          {step === 2 && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold\">Emergency Assessment</h2>\n              \n              {/* Chief Complaint */}\n              <div>\n                <Label htmlFor=\"chief-complaint\">What is the main problem? *</Label>\n                <Textarea\n                  id=\"chief-complaint\"\n                  value={emergencyData.chiefComplaint || \"\"}\n                  onChange={(e) => updateEmergencyData('chiefComplaint', e.target.value)}\n                  placeholder=\"Describe the main issue or emergency...\"\n                  data-testid=\"textarea-chief-complaint\"\n                />\n              </div>\n              \n              {/* Symptoms */}\n              <div>\n                <Label className=\"text-base font-semibold mb-4 block\">Emergency Symptoms</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 mb-4\">\n                  {emergencySymptoms.map((symptom) => (\n                    <Button\n                      key={symptom}\n                      variant={emergencyData.symptoms?.includes(symptom) ? \"destructive\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => \n                        emergencyData.symptoms?.includes(symptom) \n                          ? removeSymptom(symptom) \n                          : addSymptom(symptom)\n                      }\n                      className=\"justify-start h-auto p-3 text-left\"\n                      data-testid={`symptom-${symptom.replace(/\\s+/g, '-').toLowerCase()}`}\n                    >\n                      {symptom}\n                    </Button>\n                  ))}\n                </div>\n                \n                {emergencyData.symptoms && emergencyData.symptoms.length > 0 && (\n                  <div className=\"mt-4\">\n                    <h4 className=\"font-medium mb-2\">Selected Symptoms:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {emergencyData.symptoms.map((symptom) => (\n                        <Badge key={symptom} variant=\"destructive\" className=\"gap-1\">\n                          {symptom}\n                          <button \n                            onClick={() => removeSymptom(symptom)}\n                            className=\"ml-1 hover:text-white\"\n                          >\n                            ×\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Vital Signs Assessment */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label>Consciousness Level</Label>\n                  <Select \n                    value={emergencyData.vitalSigns?.consciousness || \"alert\"} \n                    onValueChange={(value) => updateVitalSigns('consciousness', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-consciousness\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"alert\">Alert & Responsive</SelectItem>\n                      <SelectItem value=\"confused\">Confused/Disoriented</SelectItem>\n                      <SelectItem value=\"unconscious\">Unconscious</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label>Breathing Status</Label>\n                  <Select \n                    value={emergencyData.vitalSigns?.breathing || \"normal\"} \n                    onValueChange={(value) => updateVitalSigns('breathing', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-breathing\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"normal\">Normal Breathing</SelectItem>\n                      <SelectItem value=\"difficulty\">Difficulty Breathing</SelectItem>\n                      <SelectItem value=\"absent\">Not Breathing</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label>Circulation/Pulse</Label>\n                  <Select \n                    value={emergencyData.vitalSigns?.circulation || \"normal\"} \n                    onValueChange={(value) => updateVitalSigns('circulation', value)}\n                  >\n                    <SelectTrigger data-testid=\"select-circulation\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"normal\">Normal Pulse</SelectItem>\n                      <SelectItem value=\"weak\">Weak/Irregular Pulse</SelectItem>\n                      <SelectItem value=\"absent\">No Pulse</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Medical History */}\n          {step === 3 && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-xl font-semibold\">Medical History & Emergency Contact</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"allergies\">Known Allergies</Label>\n                  <Textarea\n                    id=\"allergies\"\n                    value={emergencyData.allergies?.join(', ') || \"\"}\n                    onChange={(e) => updateEmergencyData('allergies', e.target.value.split(', ').filter(Boolean))}\n                    placeholder=\"List any known allergies...\"\n                    data-testid=\"textarea-allergies\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"medications\">Current Medications</Label>\n                  <Textarea\n                    id=\"medications\"\n                    value={emergencyData.currentMedications?.join(', ') || \"\"}\n                    onChange={(e) => updateEmergencyData('currentMedications', e.target.value.split(', ').filter(Boolean))}\n                    placeholder=\"List current medications...\"\n                    data-testid=\"textarea-medications\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"medical-history\">Relevant Medical History</Label>\n                <Textarea\n                  id=\"medical-history\"\n                  value={emergencyData.medicalHistory?.join(', ') || \"\"}\n                  onChange={(e) => updateEmergencyData('medicalHistory', e.target.value.split(', ').filter(Boolean))}\n                  placeholder=\"Any relevant medical conditions, surgeries, or chronic diseases...\"\n                  data-testid=\"textarea-medical-history\"\n                />\n              </div>\n              \n              {/* Emergency Contact */}\n              <div className=\"border rounded-lg p-4 bg-muted/30\">\n                <h3 className=\"font-semibold mb-3\">Emergency Contact Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"emergency-name\">Contact Name</Label>\n                    <Input\n                      id=\"emergency-name\"\n                      value={emergencyData.emergencyContact?.name || \"\"}\n                      onChange={(e) => updateEmergencyData('emergencyContact', {\n                        ...emergencyData.emergencyContact,\n                        name: e.target.value\n                      })}\n                      placeholder=\"Full name\"\n                      data-testid=\"input-emergency-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"emergency-relationship\">Relationship</Label>\n                    <Input\n                      id=\"emergency-relationship\"\n                      value={emergencyData.emergencyContact?.relationship || \"\"}\n                      onChange={(e) => updateEmergencyData('emergencyContact', {\n                        ...emergencyData.emergencyContact,\n                        relationship: e.target.value\n                      })}\n                      placeholder=\"e.g., spouse, parent\"\n                      data-testid=\"input-emergency-relationship\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"emergency-phone\">Phone Number</Label>\n                    <Input\n                      id=\"emergency-phone\"\n                      value={emergencyData.emergencyContact?.phone || \"\"}\n                      onChange={(e) => updateEmergencyData('emergencyContact', {\n                        ...emergencyData.emergencyContact,\n                        phone: e.target.value\n                      })}\n                      placeholder=\"+91 XXXXX XXXXX\"\n                      data-testid=\"input-emergency-phone\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex justify-between pt-6 border-t\">\n            {step > 1 && (\n              <Button \n                variant=\"outline\" \n                onClick={() => setStep(step - 1)}\n                data-testid=\"button-back\"\n              >\n                Back\n              </Button>\n            )}\n            \n            <div className=\"ml-auto\">\n              {step < 3 ? (\n                <Button \n                  onClick={() => setStep(step + 1)}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                  data-testid=\"button-next\"\n                >\n                  Next\n                </Button>\n              ) : (\n                <Button \n                  onClick={calculateTriage}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                  data-testid=\"button-assess-emergency\"\n                >\n                  <Stethoscope className=\"h-4 w-4 mr-2\" />\n                  Assess Emergency\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":26811},"client/src/components/EnhancedDoctorProfile.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Star, \n  MapPin, \n  Clock, \n  Shield, \n  Award, \n  GraduationCap, \n  Hospital,\n  BookOpen,\n  Calendar,\n  Languages,\n  Users,\n  Heart,\n  Stethoscope,\n  Trophy,\n  Video,\n  MessageCircle\n} from \"lucide-react\";\n\ninterface DoctorCredentials {\n  medicalLicense: string;\n  licenseState: string;\n  licenseExpiry: string;\n  boardCertifications: string[];\n  fellowships: string[];\n}\n\ninterface MedicalEducation {\n  medicalSchool: string;\n  residency: string;\n  fellowship?: string;\n  graduationYear: number;\n}\n\ninterface ResearchPublication {\n  title: string;\n  journal: string;\n  year: number;\n  citations: number;\n}\n\ninterface Award {\n  title: string;\n  organization: string;\n  year: number;\n}\n\ninterface DetailedDoctor {\n  id: string;\n  name: string;\n  profilePhoto?: string;\n  primarySpecialty: string;\n  subSpecialties: string[];\n  yearsOfExperience: number;\n  consultationFee: number;\n  rating: number;\n  totalConsultations: number;\n  totalReviews: number;\n  // Credentials\n  credentials: DoctorCredentials;\n  education: MedicalEducation;\n  // Professional Details\n  hospitalAffiliations: string[];\n  specialInterests: string[];\n  languages: string[];\n  // Location & Availability\n  city: string;\n  state: string;\n  availableHours: {\n    [key: string]: { start: string; end: string; }[];\n  };\n  nextAvailable: string;\n  // Research & Publications\n  researchPublications: ResearchPublication[];\n  awards: Award[];\n  // Professional Bio\n  bio: string;\n  // Patient Outcomes\n  patientSatisfactionScore: number;\n  averageResponseTime: string;\n  // Emergency & Consultation Types\n  providesEmergencyConsults: boolean;\n  consultationTypes: string[];\n}\n\ninterface EnhancedDoctorProfileProps {\n  doctor: DetailedDoctor;\n  onBookConsultation?: (doctor: DetailedDoctor) => void;\n  onEmergencyConsult?: (doctor: DetailedDoctor) => void;\n  onSendMessage?: (doctor: DetailedDoctor) => void;\n}\n\nexport default function EnhancedDoctorProfile({ \n  doctor, \n  onBookConsultation, \n  onEmergencyConsult,\n  onSendMessage \n}: EnhancedDoctorProfileProps) {\n  \n  const handleBookConsultation = () => {\n    onBookConsultation?.(doctor);\n    console.log('Book consultation with:', doctor.name);\n  };\n\n  const handleEmergencyConsult = () => {\n    onEmergencyConsult?.(doctor);\n    console.log('Emergency consultation with:', doctor.name);\n  };\n\n  const handleSendMessage = () => {\n    onSendMessage?.(doctor);\n    console.log('Send message to:', doctor.name);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Header Section */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex flex-col lg:flex-row gap-6\">\n            <div className=\"flex items-start gap-4\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={doctor.profilePhoto} alt={doctor.name} />\n                <AvatarFallback className=\"text-2xl font-semibold\">\n                  {doctor.name.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-3 flex-wrap\">\n                  <h1 className=\"text-3xl font-bold\">Dr. {doctor.name}</h1>\n                  <Badge variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200\">\n                    <Shield className=\"h-3 w-3 mr-1\" />\n                    Verified\n                  </Badge>\n                  {doctor.providesEmergencyConsults && (\n                    <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-200\">\n                      Emergency Available\n                    </Badge>\n                  )}\n                </div>\n                \n                <div className=\"space-y-1\">\n                  <p className=\"text-xl text-primary font-semibold\">{doctor.primarySpecialty}</p>\n                  {doctor.subSpecialties.length > 0 && (\n                    <p className=\"text-muted-foreground\">\n                      Sub-specialties: {doctor.subSpecialties.join(', ')}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"font-semibold\">{doctor.rating}</span>\n                    <span className=\"text-muted-foreground\">({doctor.totalReviews} reviews)</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{doctor.totalConsultations} consultations</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <GraduationCap className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{doctor.yearsOfExperience} years experience</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{doctor.city}, {doctor.state}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Next available: {doctor.nextAvailable}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Consultation Fee & Actions */}\n            <div className=\"lg:ml-auto space-y-4\">\n              <div className=\"text-center lg:text-right\">\n                <div className=\"text-3xl font-bold text-primary\">₹{doctor.consultationFee}</div>\n                <div className=\"text-sm text-muted-foreground\">per consultation</div>\n                <div className=\"text-xs text-green-600 mt-1\">\n                  ❤️ {doctor.patientSatisfactionScore}% patient satisfaction\n                </div>\n              </div>\n\n              <div className=\"flex flex-col gap-2\">\n                <Button \n                  onClick={handleBookConsultation}\n                  className=\"w-full\"\n                  data-testid={`button-book-${doctor.id}`}\n                >\n                  <Video className=\"h-4 w-4 mr-2\" />\n                  Book Consultation\n                </Button>\n                \n                {doctor.providesEmergencyConsults && (\n                  <Button \n                    variant=\"destructive\"\n                    onClick={handleEmergencyConsult}\n                    className=\"w-full\"\n                    data-testid={`button-emergency-${doctor.id}`}\n                  >\n                    <Heart className=\"h-4 w-4 mr-2\" />\n                    Emergency Consult\n                  </Button>\n                )}\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={handleSendMessage}\n                  className=\"w-full\"\n                  data-testid={`button-message-${doctor.id}`}\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Send Message\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Detailed Information Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"credentials\">Credentials</TabsTrigger>\n          <TabsTrigger value=\"education\">Education</TabsTrigger>\n          <TabsTrigger value=\"research\">Research</TabsTrigger>\n          <TabsTrigger value=\"availability\">Availability</TabsTrigger>\n          <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"h-5 w-5\" />\n                  Professional Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground leading-relaxed\">{doctor.bio}</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5\" />\n                  Specialization Areas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Special Interests</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {doctor.specialInterests.map((interest, index) => (\n                        <Badge key={index} variant=\"outline\">{interest}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Languages</h4>\n                    <div className=\"flex items-center gap-2\">\n                      <Languages className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">{doctor.languages.join(', ')}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Hospital className=\"h-5 w-5\" />\n                Hospital Affiliations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {doctor.hospitalAffiliations.map((hospital, index) => (\n                  <div key={index} className=\"flex items-center gap-2 p-3 bg-muted/30 rounded-lg\">\n                    <Hospital className=\"h-4 w-4 text-primary\" />\n                    <span>{hospital}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Credentials Tab */}\n        <TabsContent value=\"credentials\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  Medical License\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">License Number</label>\n                  <p className=\"font-mono text-lg\">{doctor.credentials.medicalLicense}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">State</label>\n                  <p>{doctor.credentials.licenseState}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Expiry Date</label>\n                  <p>{doctor.credentials.licenseExpiry}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5\" />\n                  Board Certifications\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {doctor.credentials.boardCertifications.map((cert, index) => (\n                    <div key={index} className=\"flex items-center gap-2 p-2 bg-green-50 rounded-lg\">\n                      <Award className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-sm\">{cert}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {doctor.credentials.fellowships.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <GraduationCap className=\"h-5 w-5\" />\n                  Fellowship Training\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {doctor.credentials.fellowships.map((fellowship, index) => (\n                    <div key={index} className=\"p-3 bg-blue-50 rounded-lg\">\n                      <p className=\"font-semibold text-blue-900\">{fellowship}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Education Tab */}\n        <TabsContent value=\"education\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <GraduationCap className=\"h-5 w-5\" />\n                Medical Education\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"border-l-4 border-primary pl-4\">\n                  <h3 className=\"font-semibold text-lg\">Medical Degree</h3>\n                  <p className=\"text-primary\">{doctor.education.medicalSchool}</p>\n                  <p className=\"text-sm text-muted-foreground\">Graduated {doctor.education.graduationYear}</p>\n                </div>\n                \n                <div className=\"border-l-4 border-blue-500 pl-4\">\n                  <h3 className=\"font-semibold text-lg\">Residency</h3>\n                  <p className=\"text-blue-700\">{doctor.education.residency}</p>\n                </div>\n                \n                {doctor.education.fellowship && (\n                  <div className=\"border-l-4 border-green-500 pl-4\">\n                    <h3 className=\"font-semibold text-lg\">Fellowship</h3>\n                    <p className=\"text-green-700\">{doctor.education.fellowship}</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Research Tab */}\n        <TabsContent value=\"research\" className=\"space-y-6\">\n          {doctor.awards.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-5 w-5\" />\n                  Awards & Recognition\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {doctor.awards.map((award, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-semibold\">{award.title}</p>\n                        <p className=\"text-sm text-muted-foreground\">{award.organization}</p>\n                      </div>\n                      <Badge variant=\"outline\">{award.year}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5\" />\n                Research Publications\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {doctor.researchPublications.map((publication, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg hover-elevate\">\n                    <h4 className=\"font-semibold\">{publication.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{publication.journal} • {publication.year}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{publication.citations} citations</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Availability Tab */}\n        <TabsContent value=\"availability\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Weekly Schedule\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(doctor.availableHours).map(([day, slots]) => (\n                  <div key={day} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                    <span className=\"font-medium capitalize\">{day}</span>\n                    <div className=\"flex gap-2\">\n                      {slots.map((slot, index) => (\n                        <Badge key={index} variant=\"outline\">\n                          {slot.start} - {slot.end}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Consultation Types</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {doctor.consultationTypes.map((type, index) => (\n                  <Badge key={index} variant=\"secondary\">{type}</Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reviews Tab */}\n        <TabsContent value=\"reviews\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Patient Feedback Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-700\">{doctor.patientSatisfactionScore}%</div>\n                  <div className=\"text-sm text-green-600\">Patient Satisfaction</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-700\">{doctor.averageResponseTime}</div>\n                  <div className=\"text-sm text-blue-600\">Avg Response Time</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-700\">{doctor.totalReviews}</div>\n                  <div className=\"text-sm text-purple-600\">Total Reviews</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":19806},"client/src/components/Header.tsx":{"content":"import { Search, User, Menu, Shield, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface HeaderProps {\n  onMenuClick?: () => void;\n  onProfileClick?: () => void;\n  onSearch?: (query: string) => void;\n}\n\nexport default function Header({ onMenuClick, onProfileClick, onSearch }: HeaderProps) {\n  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const query = formData.get('search') as string;\n    onSearch?.(query);\n    console.log('Search triggered:', query);\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between px-4\">\n        {/* Logo and Brand */}\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={onMenuClick}\n            data-testid=\"button-menu\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n              <Shield className=\"h-5 w-5\" />\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-lg font-semibold text-foreground\">AffordCare</span>\n              <Badge variant=\"secondary\" className=\"text-xs h-4 px-1\">\n                Verified Platform\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"hidden md:flex flex-1 max-w-md mx-6\">\n          <form onSubmit={handleSearch} className=\"relative w-full\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              name=\"search\"\n              placeholder=\"Search doctors, specialties...\"\n              className=\"pl-10 pr-4\"\n              data-testid=\"input-search\"\n            />\n          </form>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\" className=\"hidden sm:flex items-center gap-1\">\n            <Phone className=\"h-3 w-3\" />\n            24/7 Support\n          </Badge>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onProfileClick}\n            data-testid=\"button-profile\"\n          >\n            <User className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2807},"client/src/components/HeroSection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Shield, Clock, Star } from \"lucide-react\";\nimport heroImage from \"@assets/generated_images/Healthcare_hero_banner_image_26f18d63.png\";\n\ninterface HeroSectionProps {\n  onSearch?: (query: string) => void;\n  onGetStarted?: () => void;\n}\n\nexport default function HeroSection({ onSearch, onGetStarted }: HeroSectionProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(searchQuery);\n    console.log('Hero search triggered:', searchQuery);\n  };\n\n  const handleGetStarted = () => {\n    onGetStarted?.();\n    console.log('Get started clicked');\n  };\n\n  return (\n    <section className=\"relative min-h-[500px] flex items-center justify-center overflow-hidden\">\n      {/* Background Image with Overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/80 via-primary/60 to-chart-1/70\" />\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 container px-4 py-16 text-center text-white\">\n        <div className=\"mx-auto max-w-3xl space-y-6\">\n          {/* Trust Badges */}\n          <div className=\"flex flex-wrap justify-center gap-2 mb-4\">\n            <Badge variant=\"outline\" className=\"bg-white/10 border-white/20 text-white\">\n              <Shield className=\"h-3 w-3 mr-1\" />\n              DPDP Compliant\n            </Badge>\n            <Badge variant=\"outline\" className=\"bg-white/10 border-white/20 text-white\">\n              <Star className=\"h-3 w-3 mr-1\" />\n              Verified Doctors\n            </Badge>\n            <Badge variant=\"outline\" className=\"bg-white/10 border-white/20 text-white\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              24/7 Support\n            </Badge>\n          </div>\n\n          {/* Main Heading */}\n          <h1 className=\"text-4xl md:text-6xl font-bold leading-tight\">\n            Healthcare that fits\n            <br />\n            <span className=\"text-yellow-300\">your budget</span>\n          </h1>\n\n          {/* Subheading */}\n          <p className=\"text-xl md:text-2xl text-white/90 font-medium\">\n            Discover quality doctors and treatments within your price range.\n            <br />\n            <span className=\"text-lg\">Transparent pricing • No hidden costs • Instant booking</span>\n          </p>\n\n          {/* Search Bar */}\n          <div className=\"max-w-xl mx-auto\">\n            <form onSubmit={handleSearch} className=\"flex gap-2\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n                <Input\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search specialists, conditions, or symptoms...\"\n                  className=\"pl-10 h-12 text-foreground bg-white/95 border-white/20\"\n                  data-testid=\"input-hero-search\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                size=\"lg\" \n                className=\"h-12 px-6 bg-white text-primary hover:bg-white/90\"\n                data-testid=\"button-search\"\n              >\n                Search\n              </Button>\n            </form>\n          </div>\n\n          {/* CTA Button */}\n          <div className=\"pt-4\">\n            <Button \n              size=\"lg\" \n              onClick={handleGetStarted}\n              className=\"h-12 px-8 bg-yellow-400 text-primary hover:bg-yellow-300 font-semibold\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started - Choose Your Budget\n            </Button>\n          </div>\n\n          {/* Stats */}\n          <div className=\"flex flex-wrap justify-center gap-8 pt-8 text-sm\">\n            <div>\n              <div className=\"text-2xl font-bold\">5000+</div>\n              <div className=\"text-white/80\">Verified Doctors</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">50k+</div>\n              <div className=\"text-white/80\">Happy Patients</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">₹500+</div>\n              <div className=\"text-white/80\">Starting Consultations</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4712},"client/src/components/MedicalDocumentManager.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  FileText, \n  Upload, \n  Download, \n  Share2, \n  Eye, \n  Calendar, \n  User,\n  Hospital,\n  Stethoscope,\n  Activity,\n  TestTube,\n  Pill,\n  Heart,\n  Brain,\n  Camera,\n  FileImage,\n  Shield,\n  Lock,\n  Clock,\n  Search,\n  Filter,\n  Plus,\n  X\n} from \"lucide-react\";\n\ninterface MedicalDocument {\n  id: string;\n  fileName: string;\n  documentType: 'lab_report' | 'prescription' | 'imaging' | 'consultation_notes' | 'discharge_summary' | 'insurance_claim' | 'referral' | 'vaccination_record';\n  fileUrl: string;\n  fileSize: number;\n  mimeType: string;\n  uploadedBy: string;\n  uploadDate: string;\n  documentDate: string;\n  issuingProvider: string;\n  tags: string[];\n  isActive: boolean;\n  sharedWith: {\n    doctorId: string;\n    doctorName: string;\n    sharedAt: string;\n    accessLevel: 'view' | 'download' | 'full';\n  }[];\n  summary: string;\n  expiryDate?: string;\n  patientId: string;\n  consultationId?: string;\n}\n\ninterface DocumentShare {\n  doctorId: string;\n  doctorName: string;\n  accessLevel: 'view' | 'download' | 'full';\n  expiresAt?: string;\n}\n\ninterface MedicalDocumentManagerProps {\n  patientId: string;\n  documents: MedicalDocument[];\n  onUploadDocument?: (file: File, metadata: Partial<MedicalDocument>) => void;\n  onShareDocument?: (documentId: string, shareInfo: DocumentShare) => void;\n  onDownloadDocument?: (documentId: string) => void;\n  onDeleteDocument?: (documentId: string) => void;\n}\n\nconst documentTypes = [\n  { value: 'lab_report', label: 'Lab Report', icon: <TestTube className=\"h-4 w-4\" />, color: 'bg-blue-50 text-blue-700' },\n  { value: 'prescription', label: 'Prescription', icon: <Pill className=\"h-4 w-4\" />, color: 'bg-green-50 text-green-700' },\n  { value: 'imaging', label: 'Medical Imaging', icon: <Camera className=\"h-4 w-4\" />, color: 'bg-purple-50 text-purple-700' },\n  { value: 'consultation_notes', label: 'Consultation Notes', icon: <Stethoscope className=\"h-4 w-4\" />, color: 'bg-orange-50 text-orange-700' },\n  { value: 'discharge_summary', label: 'Discharge Summary', icon: <Hospital className=\"h-4 w-4\" />, color: 'bg-red-50 text-red-700' },\n  { value: 'insurance_claim', label: 'Insurance Claim', icon: <Shield className=\"h-4 w-4\" />, color: 'bg-yellow-50 text-yellow-700' },\n  { value: 'referral', label: 'Medical Referral', icon: <User className=\"h-4 w-4\" />, color: 'bg-indigo-50 text-indigo-700' },\n  { value: 'vaccination_record', label: 'Vaccination Record', icon: <Heart className=\"h-4 w-4\" />, color: 'bg-pink-50 text-pink-700' }\n];\n\nexport default function MedicalDocumentManager({ \n  patientId, \n  documents, \n  onUploadDocument,\n  onShareDocument,\n  onDownloadDocument,\n  onDeleteDocument \n}: MedicalDocumentManagerProps) {\n  \n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedType, setSelectedType] = useState<string>(\"\");\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [showShareModal, setShowShareModal] = useState(false);\n  const [selectedDocument, setSelectedDocument] = useState<MedicalDocument | null>(null);\n  const [uploadMetadata, setUploadMetadata] = useState<Partial<MedicalDocument>>({\n    documentType: 'lab_report',\n    tags: [],\n    isActive: true\n  });\n\n  const filteredDocuments = documents.filter(doc => {\n    const matchesSearch = doc.fileName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          doc.summary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          doc.issuingProvider.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === \"\" || doc.documentType === selectedType;\n    return matchesSearch && matchesType;\n  });\n\n  const getDocumentTypeInfo = (type: string) => {\n    return documentTypes.find(dt => dt.value === type) || documentTypes[0];\n  };\n\n  const handleUpload = () => {\n    // In a real implementation, this would handle file upload\n    console.log('Upload document with metadata:', uploadMetadata);\n    setShowUploadModal(false);\n    onUploadDocument?.(new File([], \"\"), uploadMetadata);\n  };\n\n  const handleShare = (shareInfo: DocumentShare) => {\n    if (selectedDocument) {\n      onShareDocument?.(selectedDocument.id, shareInfo);\n      setShowShareModal(false);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getAccessLevelColor = (level: string) => {\n    switch (level) {\n      case 'view': return 'bg-blue-50 text-blue-700';\n      case 'download': return 'bg-green-50 text-green-700';\n      case 'full': return 'bg-purple-50 text-purple-700';\n      default: return 'bg-gray-50 text-gray-700';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-6 w-6\" />\n                Medical Document Manager\n              </CardTitle>\n              <p className=\"text-muted-foreground mt-1\">\n                Secure storage and sharing of medical records\n              </p>\n            </div>\n            <Button \n              onClick={() => setShowUploadModal(true)}\n              data-testid=\"button-upload-document\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Upload Document\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search documents by name, provider, or content...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-documents\"\n                />\n              </div>\n            </div>\n            \n            <Select value={selectedType} onValueChange={setSelectedType}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-document-type\">\n                <SelectValue placeholder=\"All document types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All document types</SelectItem>\n                {documentTypes.map((type) => (\n                  <SelectItem key={type.value} value={type.value}>\n                    <div className=\"flex items-center gap-2\">\n                      {type.icon}\n                      {type.label}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Document Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"all\">All Documents ({documents.length})</TabsTrigger>\n          <TabsTrigger value=\"recent\">Recent</TabsTrigger>\n          <TabsTrigger value=\"shared\">Shared</TabsTrigger>\n          <TabsTrigger value=\"expired\">Expiring Soon</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredDocuments.map((document) => {\n              const typeInfo = getDocumentTypeInfo(document.documentType);\n              return (\n                <Card key={document.id} className=\"hover-elevate\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={typeInfo.color}>\n                          {typeInfo.icon}\n                          <span className=\"ml-1\">{typeInfo.label}</span>\n                        </Badge>\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => onDownloadDocument?.(document.id)}\n                          data-testid={`button-download-${document.id}`}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => {\n                            setSelectedDocument(document);\n                            setShowShareModal(true);\n                          }}\n                          data-testid={`button-share-${document.id}`}\n                        >\n                          <Share2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div>\n                      <h3 className=\"font-semibold text-sm truncate\" title={document.fileName}>\n                        {document.fileName}\n                      </h3>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {formatFileSize(document.fileSize)} • {document.mimeType}\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-2 text-xs\">\n                      <div className=\"flex items-center gap-2\">\n                        <Hospital className=\"h-3 w-3 text-muted-foreground\" />\n                        <span className=\"truncate\">{document.issuingProvider}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>{document.documentDate}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>Uploaded by {document.uploadedBy}</span>\n                      </div>\n                    </div>\n\n                    {document.tags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {document.tags.slice(0, 3).map((tag, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        ))}\n                        {document.tags.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{document.tags.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n\n                    {document.summary && (\n                      <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                        {document.summary}\n                      </p>\n                    )}\n\n                    {document.sharedWith.length > 0 && (\n                      <div className=\"flex items-center gap-2 text-xs\">\n                        <Share2 className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>Shared with {document.sharedWith.length} doctor(s)</span>\n                      </div>\n                    )}\n\n                    {document.expiryDate && (\n                      <div className=\"flex items-center gap-2 text-xs text-orange-600\">\n                        <Clock className=\"h-3 w-3\" />\n                        <span>Expires: {document.expiryDate}</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"recent\" className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            {filteredDocuments\n              .sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime())\n              .slice(0, 10)\n              .map((document) => {\n                const typeInfo = getDocumentTypeInfo(document.documentType);\n                return (\n                  <Card key={document.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`p-2 rounded-lg ${typeInfo.color}`}>\n                            {typeInfo.icon}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{document.fileName}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {document.issuingProvider} • {document.documentDate}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${document.id}`}>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            View\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-download-recent-${document.id}`}>\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"shared\" className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            {filteredDocuments\n              .filter(doc => doc.sharedWith.length > 0)\n              .map((document) => {\n                const typeInfo = getDocumentTypeInfo(document.documentType);\n                return (\n                  <Card key={document.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`p-2 rounded-lg ${typeInfo.color}`}>\n                            {typeInfo.icon}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{document.fileName}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {document.issuingProvider} • {document.documentDate}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\">\n                          <Share2 className=\"h-3 w-3 mr-1\" />\n                          {document.sharedWith.length} sharing(s)\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <h4 className=\"text-sm font-medium\">Shared with:</h4>\n                        {document.sharedWith.map((share, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-muted/30 rounded-lg\">\n                            <div className=\"flex items-center gap-2\">\n                              <User className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"text-sm\">Dr. {share.doctorName}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge className={`text-xs ${getAccessLevelColor(share.accessLevel)}`}>\n                                {share.accessLevel}\n                              </Badge>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {share.sharedAt}\n                              </span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"expired\" className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            {filteredDocuments\n              .filter(doc => doc.expiryDate && new Date(doc.expiryDate) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000))\n              .map((document) => {\n                const typeInfo = getDocumentTypeInfo(document.documentType);\n                const isExpired = document.expiryDate && new Date(document.expiryDate) < new Date();\n                return (\n                  <Card key={document.id} className={isExpired ? \"border-red-200 bg-red-50\" : \"border-orange-200 bg-orange-50\"}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`p-2 rounded-lg ${typeInfo.color}`}>\n                            {typeInfo.icon}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{document.fileName}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {document.issuingProvider} • {document.documentDate}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={isExpired ? \"destructive\" : \"outline\"} className=\"text-xs\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {isExpired ? \"Expired\" : \"Expires Soon\"}\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {document.expiryDate}\n                          </span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Upload Modal */}\n      {showUploadModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Upload Medical Document</CardTitle>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  onClick={() => setShowUploadModal(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"document-type\">Document Type</Label>\n                <Select \n                  value={uploadMetadata.documentType || \"\"} \n                  onValueChange={(value) => setUploadMetadata(prev => ({ ...prev, documentType: value as any }))}\n                >\n                  <SelectTrigger data-testid=\"select-upload-type\">\n                    <SelectValue placeholder=\"Select document type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {documentTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        <div className=\"flex items-center gap-2\">\n                          {type.icon}\n                          {type.label}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"issuing-provider\">Issuing Provider</Label>\n                <Input\n                  id=\"issuing-provider\"\n                  value={uploadMetadata.issuingProvider || \"\"}\n                  onChange={(e) => setUploadMetadata(prev => ({ ...prev, issuingProvider: e.target.value }))}\n                  placeholder=\"Hospital or clinic name\"\n                  data-testid=\"input-issuing-provider\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"document-date\">Document Date</Label>\n                <Input\n                  id=\"document-date\"\n                  type=\"date\"\n                  value={uploadMetadata.documentDate || \"\"}\n                  onChange={(e) => setUploadMetadata(prev => ({ ...prev, documentDate: e.target.value }))}\n                  data-testid=\"input-document-date\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"file-upload\">Select File</Label>\n                <Input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                  data-testid=\"input-file-upload\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleUpload}\n                  className=\"flex-1\"\n                  data-testid=\"button-upload-confirm\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Upload\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowUploadModal(false)}\n                  data-testid=\"button-upload-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Share Modal */}\n      {showShareModal && selectedDocument && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Share Document</CardTitle>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  onClick={() => setShowShareModal(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-3 bg-muted/30 rounded-lg\">\n                <h4 className=\"font-medium\">{selectedDocument.fileName}</h4>\n                <p className=\"text-sm text-muted-foreground\">{selectedDocument.issuingProvider}</p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"doctor-search\">Search Doctor</Label>\n                <Input\n                  id=\"doctor-search\"\n                  placeholder=\"Search by name or ID...\"\n                  data-testid=\"input-doctor-search\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"access-level\">Access Level</Label>\n                <Select defaultValue=\"view\">\n                  <SelectTrigger data-testid=\"select-access-level\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"view\">View Only</SelectItem>\n                    <SelectItem value=\"download\">View & Download</SelectItem>\n                    <SelectItem value=\"full\">Full Access</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => handleShare({\n                    doctorId: \"doc-123\",\n                    doctorName: \"Selected Doctor\",\n                    accessLevel: \"view\"\n                  })}\n                  className=\"flex-1\"\n                  data-testid=\"button-share-confirm\"\n                >\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Share\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowShareModal(false)}\n                  data-testid=\"button-share-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":25607},"client/src/components/PatientHealthRecord.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  User, \n  Heart, \n  FileText, \n  Calendar, \n  Clock, \n  Shield,\n  AlertTriangle,\n  Plus,\n  Edit,\n  Download,\n  Upload,\n  Activity,\n  Pill,\n  Stethoscope,\n  Users,\n  Phone,\n  MapPin\n} from \"lucide-react\";\n\ninterface MedicalHistory {\n  condition: string;\n  diagnosedDate: string;\n  status: 'active' | 'resolved' | 'chronic';\n  treatingPhysician: string;\n  notes: string;\n}\n\ninterface Medication {\n  name: string;\n  dosage: string;\n  frequency: string;\n  startDate: string;\n  endDate?: string;\n  prescribedBy: string;\n  purpose: string;\n  status: 'active' | 'completed' | 'discontinued';\n}\n\ninterface Allergy {\n  allergen: string;\n  severity: 'mild' | 'moderate' | 'severe';\n  reaction: string;\n  confirmedDate: string;\n}\n\ninterface VitalSigns {\n  date: string;\n  bloodPressure: { systolic: number; diastolic: number; };\n  heartRate: number;\n  temperature: number;\n  weight: number;\n  height: number;\n  bmi: number;\n}\n\ninterface FamilyHistory {\n  relation: string;\n  conditions: string[];\n  ageAtDiagnosis?: number;\n  notes: string;\n}\n\ninterface EmergencyContact {\n  name: string;\n  relationship: string;\n  phoneNumber: string;\n  email?: string;\n}\n\ninterface PatientRecord {\n  // Personal Information\n  id: string;\n  fullName: string;\n  dateOfBirth: string;\n  age: number;\n  gender: 'male' | 'female' | 'other';\n  bloodGroup: string;\n  phoneNumber: string;\n  email: string;\n  address: {\n    street: string;\n    city: string;\n    state: string;\n    pincode: string;\n  };\n  emergencyContacts: EmergencyContact[];\n  \n  // Medical Information\n  allergies: Allergy[];\n  chronicConditions: string[];\n  medicalHistory: MedicalHistory[];\n  currentMedications: Medication[];\n  familyHistory: FamilyHistory[];\n  vitalSigns: VitalSigns[];\n  \n  // Insurance & Financial\n  insuranceProvider?: string;\n  policyNumber?: string;\n  preferredBudgetRange: 'basic' | 'specialist' | 'premium';\n  \n  // Platform Information\n  registrationDate: string;\n  lastVisit: string;\n  totalConsultations: number;\n  preferredLanguages: string[];\n}\n\ninterface PatientHealthRecordProps {\n  patient: PatientRecord;\n  isEditable?: boolean;\n  onUpdateRecord?: (updates: Partial<PatientRecord>) => void;\n  onAddMedication?: (medication: Medication) => void;\n  onAddAllergy?: (allergy: Allergy) => void;\n  onAddVitalSigns?: (vitals: VitalSigns) => void;\n}\n\nexport default function PatientHealthRecord({ \n  patient, \n  isEditable = true,\n  onUpdateRecord,\n  onAddMedication,\n  onAddAllergy,\n  onAddVitalSigns\n}: PatientHealthRecordProps) {\n  \n  const [editMode, setEditMode] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const handleEdit = () => {\n    setEditMode(!editMode);\n    console.log('Edit mode toggled:', !editMode);\n  };\n\n  const handleSave = () => {\n    setEditMode(false);\n    onUpdateRecord?.(patient);\n    console.log('Patient record saved');\n  };\n\n  const calculateBMI = (weight: number, height: number) => {\n    const heightInMeters = height / 100;\n    return (weight / (heightInMeters * heightInMeters)).toFixed(1);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-50 text-green-700 border-green-200';\n      case 'chronic': return 'bg-orange-50 text-orange-700 border-orange-200';\n      case 'resolved': return 'bg-gray-50 text-gray-700 border-gray-200';\n      case 'discontinued': return 'bg-red-50 text-red-700 border-red-200';\n      default: return 'bg-blue-50 text-blue-700 border-blue-200';\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'mild': return 'bg-yellow-50 text-yellow-700 border-yellow-200';\n      case 'moderate': return 'bg-orange-50 text-orange-700 border-orange-200';\n      case 'severe': return 'bg-red-50 text-red-700 border-red-200';\n      default: return 'bg-gray-50 text-gray-700 border-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n      {/* Patient Header */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start gap-4\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarImage src=\"\" alt={patient.fullName} />\n                <AvatarFallback className=\"text-xl font-semibold\">\n                  {patient.fullName.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-3\">\n                  <h1 className=\"text-2xl font-bold\">{patient.fullName}</h1>\n                  <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n                    Patient ID: {patient.id}\n                  </Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Age:</span>\n                    <span className=\"ml-2 font-medium\">{patient.age} years</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Gender:</span>\n                    <span className=\"ml-2 font-medium capitalize\">{patient.gender}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Blood Group:</span>\n                    <span className=\"ml-2 font-medium\">{patient.bloodGroup}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Budget Range:</span>\n                    <Badge variant=\"secondary\" className=\"ml-2 capitalize\">\n                      {patient.preferredBudgetRange}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    <Phone className=\"h-4 w-4\" />\n                    <span>{patient.phoneNumber}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>{patient.address.city}, {patient.address.state}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>Last visit: {patient.lastVisit}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                data-testid=\"button-download-record\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              {isEditable && (\n                <Button \n                  variant={editMode ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={editMode ? handleSave : handleEdit}\n                  data-testid=\"button-edit-record\"\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  {editMode ? 'Save' : 'Edit'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-7\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"medical-history\">History</TabsTrigger>\n          <TabsTrigger value=\"medications\">Medications</TabsTrigger>\n          <TabsTrigger value=\"allergies\">Allergies</TabsTrigger>\n          <TabsTrigger value=\"vitals\">Vitals</TabsTrigger>\n          <TabsTrigger value=\"family\">Family</TabsTrigger>\n          <TabsTrigger value=\"emergency\">Emergency</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Quick Stats\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Consultations</span>\n                  <span className=\"font-semibold\">{patient.totalConsultations}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Active Medications</span>\n                  <span className=\"font-semibold\">\n                    {patient.currentMedications.filter(med => med.status === 'active').length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Known Allergies</span>\n                  <span className=\"font-semibold\">{patient.allergies.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Chronic Conditions</span>\n                  <span className=\"font-semibold\">{patient.chronicConditions.length}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Current Medications Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Pill className=\"h-5 w-5\" />\n                  Current Medications\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {patient.currentMedications\n                  .filter(med => med.status === 'active')\n                  .slice(0, 3)\n                  .map((medication, index) => (\n                    <div key={index} className=\"p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"font-medium\">{medication.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {medication.dosage} • {medication.frequency}\n                      </div>\n                    </div>\n                  ))}\n                {patient.currentMedications.filter(med => med.status === 'active').length > 3 && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => setActiveTab('medications')}\n                    data-testid=\"button-view-all-medications\"\n                  >\n                    View All ({patient.currentMedications.filter(med => med.status === 'active').length})\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Vitals */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5\" />\n                  Latest Vitals\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {patient.vitalSigns.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {(() => {\n                      const latest = patient.vitalSigns[patient.vitalSigns.length - 1];\n                      return (\n                        <>\n                          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">BP:</span>\n                              <span className=\"ml-2 font-medium\">\n                                {latest.bloodPressure.systolic}/{latest.bloodPressure.diastolic}\n                              </span>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">HR:</span>\n                              <span className=\"ml-2 font-medium\">{latest.heartRate} bpm</span>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Weight:</span>\n                              <span className=\"ml-2 font-medium\">{latest.weight} kg</span>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">BMI:</span>\n                              <span className=\"ml-2 font-medium\">{latest.bmi}</span>\n                            </div>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Recorded on {latest.date}\n                          </div>\n                        </>\n                      );\n                    })()}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground text-sm\">No vitals recorded yet</p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Chronic Conditions & Allergies Alert */}\n          {(patient.chronicConditions.length > 0 || patient.allergies.length > 0) && (\n            <Card className=\"border-orange-200 bg-orange-50\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-orange-800\">\n                  <AlertTriangle className=\"h-5 w-5\" />\n                  Medical Alerts\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {patient.chronicConditions.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-orange-800 mb-2\">Chronic Conditions:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {patient.chronicConditions.map((condition, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"border-orange-300 text-orange-700\">\n                          {condition}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                {patient.allergies.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-orange-800 mb-2\">Allergies:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {patient.allergies.map((allergy, index) => (\n                        <Badge \n                          key={index} \n                          className={`${getSeverityColor(allergy.severity)} border`}\n                        >\n                          {allergy.allergen} ({allergy.severity})\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Medical History Tab */}\n        <TabsContent value=\"medical-history\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Medical History</h2>\n            {isEditable && (\n              <Button size=\"sm\" data-testid=\"button-add-medical-history\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add History\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            {patient.medicalHistory.map((history, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h3 className=\"font-semibold\">{history.condition}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Diagnosed: {history.diagnosedDate} • Dr. {history.treatingPhysician}\n                      </p>\n                    </div>\n                    <Badge className={getStatusColor(history.status)}>\n                      {history.status}\n                    </Badge>\n                  </div>\n                  {history.notes && (\n                    <p className=\"text-sm\">{history.notes}</p>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Medications Tab */}\n        <TabsContent value=\"medications\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Current Medications</h2>\n            {isEditable && (\n              <Button size=\"sm\" data-testid=\"button-add-medication\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Medication\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            {patient.currentMedications.map((medication, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h3 className=\"font-semibold\">{medication.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {medication.dosage} • {medication.frequency}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Prescribed by Dr. {medication.prescribedBy} • Started {medication.startDate}\n                      </p>\n                    </div>\n                    <Badge className={getStatusColor(medication.status)}>\n                      {medication.status}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm\"><strong>Purpose:</strong> {medication.purpose}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Allergies Tab */}\n        <TabsContent value=\"allergies\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Known Allergies</h2>\n            {isEditable && (\n              <Button size=\"sm\" data-testid=\"button-add-allergy\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Allergy\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {patient.allergies.map((allergy, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h3 className=\"font-semibold\">{allergy.allergen}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Confirmed: {allergy.confirmedDate}\n                      </p>\n                    </div>\n                    <Badge className={getSeverityColor(allergy.severity)}>\n                      {allergy.severity}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm\"><strong>Reaction:</strong> {allergy.reaction}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Vitals Tab */}\n        <TabsContent value=\"vitals\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Vital Signs History</h2>\n            {isEditable && (\n              <Button size=\"sm\" data-testid=\"button-add-vitals\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Record Vitals\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            {patient.vitalSigns.map((vitals, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"font-semibold\">Vitals - {vitals.date}</h3>\n                    <Badge variant=\"outline\">\n                      BMI: {vitals.bmi}\n                    </Badge>\n                  </div>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Blood Pressure:</span>\n                      <span className=\"ml-2 font-medium\">\n                        {vitals.bloodPressure.systolic}/{vitals.bloodPressure.diastolic} mmHg\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Heart Rate:</span>\n                      <span className=\"ml-2 font-medium\">{vitals.heartRate} bpm</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Temperature:</span>\n                      <span className=\"ml-2 font-medium\">{vitals.temperature}°F</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Weight:</span>\n                      <span className=\"ml-2 font-medium\">{vitals.weight} kg</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Family History Tab */}\n        <TabsContent value=\"family\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Family Medical History</h2>\n            {isEditable && (\n              <Button size=\"sm\" data-testid=\"button-add-family-history\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Family History\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            {patient.familyHistory.map((family, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"mb-3\">\n                    <h3 className=\"font-semibold capitalize\">{family.relation}</h3>\n                    {family.ageAtDiagnosis && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        Age at diagnosis: {family.ageAtDiagnosis} years\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"mb-3\">\n                    <h4 className=\"text-sm font-medium mb-2\">Conditions:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {family.conditions.map((condition, idx) => (\n                        <Badge key={idx} variant=\"outline\">\n                          {condition}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  {family.notes && (\n                    <p className=\"text-sm\">{family.notes}</p>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Emergency Contacts Tab */}\n        <TabsContent value=\"emergency\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Emergency Contacts</h2>\n            {isEditable && (\n              <Button size=\"sm\" data-testid=\"button-add-emergency-contact\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Contact\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {patient.emergencyContacts.map((contact, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-semibold\">{contact.name}</h3>\n                    <p className=\"text-sm text-muted-foreground capitalize\">\n                      {contact.relationship}\n                    </p>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        <span>{contact.phoneNumber}</span>\n                      </div>\n                      {contact.email && (\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-muted-foreground\">Email:</span>\n                          <span>{contact.email}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25875},"client/src/components/SearchInterface.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Search, \n  Filter, \n  MapPin, \n  Clock, \n  Star, \n  SlidersHorizontal,\n  X\n} from \"lucide-react\";\n\ninterface SearchFilters {\n  specialty: string;\n  budgetRange: string;\n  location: string;\n  availability: string;\n  rating: string;\n  experience: string;\n}\n\ninterface SearchInterfaceProps {\n  onSearch?: (query: string, filters: SearchFilters) => void;\n  onClearFilters?: () => void;\n}\n\nexport default function SearchInterface({ onSearch, onClearFilters }: SearchInterfaceProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState<SearchFilters>({\n    specialty: \"\",\n    budgetRange: \"\",\n    location: \"\",\n    availability: \"\",\n    rating: \"\",\n    experience: \"\"\n  });\n\n  const handleSearch = () => {\n    onSearch?.(searchQuery, filters);\n    console.log('Search triggered:', { query: searchQuery, filters });\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      specialty: \"\",\n      budgetRange: \"\",\n      location: \"\",\n      availability: \"\",\n      rating: \"\",\n      experience: \"\"\n    });\n    setSearchQuery(\"\");\n    onClearFilters?.();\n    console.log('Filters cleared');\n  };\n\n  const updateFilter = (key: keyof SearchFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const activeFiltersCount = Object.values(filters).filter(Boolean).length;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"text-lg\">Find Your Doctor</CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Main Search */}\n        <div className=\"flex gap-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search by doctor name, specialty, or condition...\"\n              className=\"pl-10\"\n              data-testid=\"input-doctor-search\"\n            />\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowFilters(!showFilters)}\n            className=\"relative\"\n            data-testid=\"button-toggle-filters\"\n          >\n            <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n            Filters\n            {activeFiltersCount > 0 && (\n              <Badge className=\"absolute -top-2 -right-2 h-5 w-5 text-xs p-0 flex items-center justify-center\">\n                {activeFiltersCount}\n              </Badge>\n            )}\n          </Button>\n        </div>\n\n        {/* Filter Panel */}\n        {showFilters && (\n          <div className=\"border rounded-lg p-4 space-y-4 bg-muted/20\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium flex items-center gap-2\">\n                <Filter className=\"h-4 w-4\" />\n                Filter Options\n              </h3>\n              {activeFiltersCount > 0 && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={handleClearFilters}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <X className=\"h-4 w-4 mr-1\" />\n                  Clear All\n                </Button>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Specialty</label>\n                <Select value={filters.specialty} onValueChange={(value) => updateFilter('specialty', value)}>\n                  <SelectTrigger data-testid=\"select-specialty\">\n                    <SelectValue placeholder=\"Select specialty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cardiology\">Cardiology</SelectItem>\n                    <SelectItem value=\"dermatology\">Dermatology</SelectItem>\n                    <SelectItem value=\"general\">General Medicine</SelectItem>\n                    <SelectItem value=\"orthopedic\">Orthopedic</SelectItem>\n                    <SelectItem value=\"pediatric\">Pediatric</SelectItem>\n                    <SelectItem value=\"psychiatry\">Psychiatry</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Budget Range</label>\n                <Select value={filters.budgetRange} onValueChange={(value) => updateFilter('budgetRange', value)}>\n                  <SelectTrigger data-testid=\"select-budget\">\n                    <SelectValue placeholder=\"Select budget\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"under-500\">Under ₹500</SelectItem>\n                    <SelectItem value=\"500-1000\">₹500 - ₹1,000</SelectItem>\n                    <SelectItem value=\"1000-2000\">₹1,000 - ₹2,000</SelectItem>\n                    <SelectItem value=\"above-2000\">Above ₹2,000</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Location</label>\n                <Select value={filters.location} onValueChange={(value) => updateFilter('location', value)}>\n                  <SelectTrigger data-testid=\"select-location\">\n                    <SelectValue placeholder=\"Select city\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"mumbai\">Mumbai</SelectItem>\n                    <SelectItem value=\"delhi\">Delhi</SelectItem>\n                    <SelectItem value=\"bangalore\">Bangalore</SelectItem>\n                    <SelectItem value=\"chennai\">Chennai</SelectItem>\n                    <SelectItem value=\"hyderabad\">Hyderabad</SelectItem>\n                    <SelectItem value=\"pune\">Pune</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Availability</label>\n                <Select value={filters.availability} onValueChange={(value) => updateFilter('availability', value)}>\n                  <SelectTrigger data-testid=\"select-availability\">\n                    <SelectValue placeholder=\"When do you need?\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"tomorrow\">Tomorrow</SelectItem>\n                    <SelectItem value=\"this-week\">This Week</SelectItem>\n                    <SelectItem value=\"anytime\">Anytime</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Minimum Rating</label>\n                <Select value={filters.rating} onValueChange={(value) => updateFilter('rating', value)}>\n                  <SelectTrigger data-testid=\"select-rating\">\n                    <SelectValue placeholder=\"Select rating\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"4.5\">4.5+ Stars</SelectItem>\n                    <SelectItem value=\"4.0\">4.0+ Stars</SelectItem>\n                    <SelectItem value=\"3.5\">3.5+ Stars</SelectItem>\n                    <SelectItem value=\"any\">Any Rating</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Experience</label>\n                <Select value={filters.experience} onValueChange={(value) => updateFilter('experience', value)}>\n                  <SelectTrigger data-testid=\"select-experience\">\n                    <SelectValue placeholder=\"Years of experience\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"15+\">15+ Years</SelectItem>\n                    <SelectItem value=\"10+\">10+ Years</SelectItem>\n                    <SelectItem value=\"5+\">5+ Years</SelectItem>\n                    <SelectItem value=\"any\">Any Experience</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Active Filters Display */}\n        {activeFiltersCount > 0 && (\n          <div className=\"flex flex-wrap gap-2\">\n            {Object.entries(filters).map(([key, value]) => \n              value && (\n                <Badge key={key} variant=\"secondary\" className=\"gap-1\">\n                  {key}: {value}\n                  <X \n                    className=\"h-3 w-3 cursor-pointer hover:text-destructive\" \n                    onClick={() => updateFilter(key as keyof SearchFilters, \"\")}\n                  />\n                </Badge>\n              )\n            )}\n          </div>\n        )}\n\n        {/* Search Button */}\n        <Button \n          onClick={handleSearch} \n          className=\"w-full\"\n          data-testid=\"button-search-doctors\"\n        >\n          <Search className=\"h-4 w-4 mr-2\" />\n          Search Doctors\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9853},"client/src/components/SymptomChecker.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Search, \n  Stethoscope, \n  AlertTriangle, \n  Clock, \n  User,\n  Activity,\n  Thermometer,\n  Heart,\n  Brain,\n  Eye,\n  Ear,\n  Zap,\n  ArrowRight\n} from \"lucide-react\";\n\ninterface SymptomData {\n  symptoms: string[];\n  duration: string;\n  severity: string;\n  bodyPart: string;\n  additionalInfo: string;\n  age: string;\n  gender: string;\n}\n\ninterface TriageResult {\n  urgencyLevel: 'emergency' | 'urgent' | 'moderate' | 'routine';\n  recommendedSpecialists: string[];\n  suggestedActions: string[];\n  estimatedCost: {\n    basic: number;\n    specialist: number;\n    premium: number;\n  };\n  disclaimer: string;\n}\n\ninterface SymptomCheckerProps {\n  onGetRecommendations?: (symptoms: SymptomData, results: TriageResult) => void;\n  onBookConsultation?: (specialist: string) => void;\n}\n\nconst commonSymptoms = [\n  \"Chest pain\", \"Shortness of breath\", \"Headache\", \"Fever\", \"Cough\",\n  \"Abdominal pain\", \"Nausea\", \"Dizziness\", \"Fatigue\", \"Joint pain\",\n  \"Back pain\", \"Sore throat\", \"Skin rash\", \"Vision problems\", \"Hearing issues\"\n];\n\nconst bodyParts = [\n  { value: \"head\", label: \"Head & Neck\", icon: <Brain className=\"h-4 w-4\" /> },\n  { value: \"chest\", label: \"Chest & Heart\", icon: <Heart className=\"h-4 w-4\" /> },\n  { value: \"abdomen\", label: \"Abdomen\", icon: <Activity className=\"h-4 w-4\" /> },\n  { value: \"back\", label: \"Back & Spine\", icon: <User className=\"h-4 w-4\" /> },\n  { value: \"limbs\", label: \"Arms & Legs\", icon: <User className=\"h-4 w-4\" /> },\n  { value: \"eyes\", label: \"Eyes\", icon: <Eye className=\"h-4 w-4\" /> },\n  { value: \"ears\", label: \"Ears\", icon: <Ear className=\"h-4 w-4\" /> },\n  { value: \"general\", label: \"General/Whole body\", icon: <Activity className=\"h-4 w-4\" /> }\n];\n\nexport default function SymptomChecker({ onGetRecommendations, onBookConsultation }: SymptomCheckerProps) {\n  const [step, setStep] = useState(1);\n  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([]);\n  const [customSymptom, setCustomSymptom] = useState(\"\");\n  const [formData, setFormData] = useState<SymptomData>({\n    symptoms: [],\n    duration: \"\",\n    severity: \"\",\n    bodyPart: \"\",\n    additionalInfo: \"\",\n    age: \"\",\n    gender: \"\"\n  });\n  const [results, setResults] = useState<TriageResult | null>(null);\n\n  const addSymptom = (symptom: string) => {\n    if (!selectedSymptoms.includes(symptom)) {\n      setSelectedSymptoms([...selectedSymptoms, symptom]);\n    }\n  };\n\n  const removeSymptom = (symptom: string) => {\n    setSelectedSymptoms(selectedSymptoms.filter(s => s !== symptom));\n  };\n\n  const addCustomSymptom = () => {\n    if (customSymptom.trim() && !selectedSymptoms.includes(customSymptom.trim())) {\n      setSelectedSymptoms([...selectedSymptoms, customSymptom.trim()]);\n      setCustomSymptom(\"\");\n    }\n  };\n\n  const updateFormData = (field: keyof SymptomData, value: string | string[]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNext = () => {\n    if (step === 1 && selectedSymptoms.length > 0) {\n      updateFormData('symptoms', selectedSymptoms);\n      setStep(2);\n    } else if (step === 2) {\n      setStep(3);\n    }\n  };\n\n  const handleBack = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n\n  const generateTriageResults = (): TriageResult => {\n    // Simple triage logic based on symptoms (in a real app, this would be AI-powered)\n    const emergencySymptoms = [\"chest pain\", \"severe headache\", \"difficulty breathing\", \"severe abdominal pain\"];\n    const urgentSymptoms = [\"fever\", \"persistent cough\", \"severe pain\"];\n    \n    const hasEmergencySymptom = selectedSymptoms.some(symptom => \n      emergencySymptoms.some(emergency => symptom.toLowerCase().includes(emergency))\n    );\n    \n    const hasUrgentSymptom = selectedSymptoms.some(symptom => \n      urgentSymptoms.some(urgent => symptom.toLowerCase().includes(urgent))\n    );\n\n    let urgencyLevel: TriageResult['urgencyLevel'];\n    let recommendedSpecialists: string[];\n    let suggestedActions: string[];\n\n    if (hasEmergencySymptom || formData.severity === \"severe\") {\n      urgencyLevel = \"emergency\";\n      recommendedSpecialists = [\"Emergency Medicine\", \"Cardiologist\", \"Internal Medicine\"];\n      suggestedActions = [\n        \"Seek immediate medical attention\",\n        \"Consider emergency room visit\",\n        \"Do not delay treatment\"\n      ];\n    } else if (hasUrgentSymptom || formData.severity === \"moderate\") {\n      urgencyLevel = \"urgent\";\n      recommendedSpecialists = [\"Internal Medicine\", \"Family Medicine\", \"Specialist consultation\"];\n      suggestedActions = [\n        \"Schedule consultation within 24-48 hours\",\n        \"Monitor symptoms closely\",\n        \"Consider urgent care if symptoms worsen\"\n      ];\n    } else {\n      urgencyLevel = \"routine\";\n      recommendedSpecialists = [\"General Physician\", \"Family Medicine\"];\n      suggestedActions = [\n        \"Schedule consultation within a week\",\n        \"Monitor symptoms\",\n        \"Practice self-care measures\"\n      ];\n    }\n\n    return {\n      urgencyLevel,\n      recommendedSpecialists,\n      suggestedActions,\n      estimatedCost: {\n        basic: urgencyLevel === \"emergency\" ? 2000 : urgencyLevel === \"urgent\" ? 800 : 500,\n        specialist: urgencyLevel === \"emergency\" ? 3500 : urgencyLevel === \"urgent\" ? 1500 : 1000,\n        premium: urgencyLevel === \"emergency\" ? 5000 : urgencyLevel === \"urgent\" ? 2500 : 1800\n      },\n      disclaimer: \"This is not a medical diagnosis. Please consult with a healthcare professional for proper evaluation and treatment.\"\n    };\n  };\n\n  const handleGetRecommendations = () => {\n    const triageResults = generateTriageResults();\n    setResults(triageResults);\n    onGetRecommendations?.(formData, triageResults);\n    console.log('Symptom analysis:', { formData, results: triageResults });\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency': return 'bg-red-50 text-red-700 border-red-200';\n      case 'urgent': return 'bg-orange-50 text-orange-700 border-orange-200';\n      case 'moderate': return 'bg-yellow-50 text-yellow-700 border-yellow-200';\n      default: return 'bg-green-50 text-green-700 border-green-200';\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'urgent': return <Clock className=\"h-4 w-4\" />;\n      case 'moderate': return <Activity className=\"h-4 w-4\" />;\n      default: return <Stethoscope className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (results) {\n    return (\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Stethoscope className=\"h-5 w-5\" />\n              Symptom Analysis Results\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Urgency Level */}\n            <div className={`p-4 rounded-lg border ${getUrgencyColor(results.urgencyLevel)}`}>\n              <div className=\"flex items-center gap-2 mb-2\">\n                {getUrgencyIcon(results.urgencyLevel)}\n                <span className=\"font-semibold text-lg capitalize\">{results.urgencyLevel} Priority</span>\n              </div>\n              <p className=\"text-sm\">Based on your symptoms, this appears to be a {results.urgencyLevel} priority case.</p>\n            </div>\n\n            {/* Recommended Actions */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Recommended Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {results.suggestedActions.map((action, index) => (\n                      <li key={index} className=\"flex items-start gap-2\">\n                        <ArrowRight className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm\">{action}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Recommended Specialists</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {results.recommendedSpecialists.map((specialist, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-muted/30 rounded-lg\">\n                        <span className=\"text-sm font-medium\">{specialist}</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => onBookConsultation?.(specialist)}\n                          data-testid={`button-book-${specialist.replace(/\\\\s+/g, '-').toLowerCase()}`}\n                        >\n                          Book Now\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Cost Estimates */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Estimated Consultation Costs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"p-4 bg-green-50 rounded-lg text-center\">\n                    <div className=\"text-2xl font-bold text-green-700\">₹{results.estimatedCost.basic}</div>\n                    <div className=\"text-sm text-green-600\">Basic Care</div>\n                  </div>\n                  <div className=\"p-4 bg-blue-50 rounded-lg text-center\">\n                    <div className=\"text-2xl font-bold text-blue-700\">₹{results.estimatedCost.specialist}</div>\n                    <div className=\"text-sm text-blue-600\">Specialist Care</div>\n                  </div>\n                  <div className=\"p-4 bg-purple-50 rounded-lg text-center\">\n                    <div className=\"text-2xl font-bold text-purple-700\">₹{results.estimatedCost.premium}</div>\n                    <div className=\"text-sm text-purple-600\">Premium Care</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Disclaimer */}\n            <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <p className=\"text-sm text-yellow-800\">\n                <strong>Medical Disclaimer:</strong> {results.disclaimer}\n              </p>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button onClick={() => { setResults(null); setStep(1); }} variant=\"outline\">\n                Check Other Symptoms\n              </Button>\n              <Button onClick={() => onBookConsultation?.('General Physician')}>\n                Book Consultation Now\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            AI-Powered Symptom Checker\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Get personalized doctor recommendations based on your symptoms\n          </p>\n        </CardHeader>\n        <CardContent>\n          {/* Step 1: Symptom Selection */}\n          {step === 1 && (\n            <div className=\"space-y-6\">\n              <div>\n                <Label className=\"text-lg font-semibold mb-4 block\">What symptoms are you experiencing?</Label>\n                \n                {/* Common Symptoms */}\n                <div className=\"mb-6\">\n                  <h3 className=\"font-medium mb-3\">Common Symptoms</h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                    {commonSymptoms.map((symptom) => (\n                      <Button\n                        key={symptom}\n                        variant={selectedSymptoms.includes(symptom) ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => addSymptom(symptom)}\n                        className=\"justify-start h-auto p-3\"\n                        data-testid={`symptom-${symptom.replace(/\\\\s+/g, '-').toLowerCase()}`}\n                      >\n                        {symptom}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Custom Symptom */}\n                <div className=\"mb-6\">\n                  <h3 className=\"font-medium mb-3\">Add Custom Symptom</h3>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      value={customSymptom}\n                      onChange={(e) => setCustomSymptom(e.target.value)}\n                      placeholder=\"Describe your symptom...\"\n                      data-testid=\"input-custom-symptom\"\n                    />\n                    <Button onClick={addCustomSymptom} variant=\"outline\" data-testid=\"button-add-symptom\">\n                      Add\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Selected Symptoms */}\n                {selectedSymptoms.length > 0 && (\n                  <div>\n                    <h3 className=\"font-medium mb-3\">Selected Symptoms</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedSymptoms.map((symptom) => (\n                        <Badge \n                          key={symptom} \n                          variant=\"secondary\" \n                          className=\"gap-1\"\n                        >\n                          {symptom}\n                          <button \n                            onClick={() => removeSymptom(symptom)}\n                            className=\"ml-1 hover:text-destructive\"\n                          >\n                            ×\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Details */}\n          {step === 2 && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"duration\">How long have you had these symptoms?</Label>\n                  <Select value={formData.duration} onValueChange={(value) => updateFormData('duration', value)}>\n                    <SelectTrigger data-testid=\"select-duration\">\n                      <SelectValue placeholder=\"Select duration\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"few-hours\">A few hours</SelectItem>\n                      <SelectItem value=\"1-day\">1 day</SelectItem>\n                      <SelectItem value=\"2-3-days\">2-3 days</SelectItem>\n                      <SelectItem value=\"1-week\">About a week</SelectItem>\n                      <SelectItem value=\"few-weeks\">A few weeks</SelectItem>\n                      <SelectItem value=\"months\">Months</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"severity\">How severe are your symptoms?</Label>\n                  <Select value={formData.severity} onValueChange={(value) => updateFormData('severity', value)}>\n                    <SelectTrigger data-testid=\"select-severity\">\n                      <SelectValue placeholder=\"Select severity\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"mild\">Mild - Doesn't interfere with daily activities</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate - Some impact on daily activities</SelectItem>\n                      <SelectItem value=\"severe\">Severe - Significantly impacts daily life</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"body-part\">Which part of your body is affected?</Label>\n                  <Select value={formData.bodyPart} onValueChange={(value) => updateFormData('bodyPart', value)}>\n                    <SelectTrigger data-testid=\"select-body-part\">\n                      <SelectValue placeholder=\"Select body part\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {bodyParts.map((part) => (\n                        <SelectItem key={part.value} value={part.value}>\n                          <div className=\"flex items-center gap-2\">\n                            {part.icon}\n                            {part.label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"gender\">Gender</Label>\n                  <Select value={formData.gender} onValueChange={(value) => updateFormData('gender', value)}>\n                    <SelectTrigger data-testid=\"select-gender\">\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                      <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"age\">Age</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  value={formData.age}\n                  onChange={(e) => updateFormData('age', e.target.value)}\n                  placeholder=\"Enter your age\"\n                  data-testid=\"input-age\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"additional-info\">Additional Information</Label>\n                <Textarea\n                  id=\"additional-info\"\n                  value={formData.additionalInfo}\n                  onChange={(e) => updateFormData('additionalInfo', e.target.value)}\n                  placeholder=\"Any additional details about your symptoms, triggers, or medical history...\"\n                  data-testid=\"textarea-additional-info\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex justify-between pt-6\">\n            {step > 1 && (\n              <Button variant=\"outline\" onClick={handleBack} data-testid=\"button-back\">\n                Back\n              </Button>\n            )}\n            \n            <div className=\"ml-auto flex gap-2\">\n              {step < 2 ? (\n                <Button \n                  onClick={handleNext} \n                  disabled={selectedSymptoms.length === 0}\n                  data-testid=\"button-next\"\n                >\n                  Next: Add Details\n                </Button>\n              ) : (\n                <Button onClick={handleGetRecommendations} data-testid=\"button-get-recommendations\">\n                  <Stethoscope className=\"h-4 w-4 mr-2\" />\n                  Get Recommendations\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20389},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    // Check for saved theme preference or default to light mode\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {\n      setIsDark(true);\n      document.documentElement.classList.add('dark');\n    } else {\n      setIsDark(false);\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newIsDark = !isDark;\n    setIsDark(newIsDark);\n    \n    if (newIsDark) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n    \n    console.log('Theme toggled to:', newIsDark ? 'dark' : 'light');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"h-9 w-9\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {isDark ? (\n        <Sun className=\"h-4 w-4\" />\n      ) : (\n        <Moon className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1465},"client/src/components/TrustSection.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Shield, \n  Star, \n  Clock, \n  Award, \n  Users, \n  Zap,\n  CheckCircle,\n  Phone\n} from \"lucide-react\";\n\nconst trustFeatures = [\n  {\n    icon: <Shield className=\"h-6 w-6\" />,\n    title: \"DPDP Compliant\",\n    description: \"Your data is protected with highest security standards\"\n  },\n  {\n    icon: <Star className=\"h-6 w-6\" />,\n    title: \"Verified Doctors\",\n    description: \"All doctors are verified with valid medical licenses\"\n  },\n  {\n    icon: <Clock className=\"h-6 w-6\" />,\n    title: \"24/7 Support\",\n    description: \"Round-the-clock customer support for your queries\"\n  },\n  {\n    icon: <Award className=\"h-6 w-6\" />,\n    title: \"ISO Certified\",\n    description: \"Healthcare platform certified for quality standards\"\n  }\n];\n\nconst statistics = [\n  {\n    icon: <Users className=\"h-8 w-8\" />,\n    number: \"50,000+\",\n    label: \"Happy Patients\",\n    description: \"Satisfied with our services\"\n  },\n  {\n    icon: <Star className=\"h-8 w-8\" />,\n    number: \"5,000+\",\n    label: \"Verified Doctors\",\n    description: \"Across all specialties\"\n  },\n  {\n    icon: <CheckCircle className=\"h-8 w-8\" />,\n    number: \"98%\",\n    label: \"Success Rate\",\n    description: \"Successful consultations\"\n  },\n  {\n    icon: <Zap className=\"h-8 w-8\" />,\n    number: \"< 2 min\",\n    label: \"Avg. Booking Time\",\n    description: \"Quick and easy booking\"\n  }\n];\n\nexport default function TrustSection() {\n  return (\n    <section className=\"py-16 bg-muted/30\">\n      <div className=\"container px-4\">\n        {/* Trust Features */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold mb-4\">Why Trust AffordCare?</h2>\n          <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n            We prioritize your health and safety with verified doctors, transparent pricing, and secure platform\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          {trustFeatures.map((feature, index) => (\n            <Card key={index} className=\"text-center hover-elevate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-center mb-4\">\n                  <div className=\"p-3 rounded-lg bg-primary/10 text-primary\">\n                    {feature.icon}\n                  </div>\n                </div>\n                <h3 className=\"font-semibold mb-2\">{feature.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Statistics */}\n        <div className=\"bg-card rounded-lg p-8\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold mb-2\">Trusted by Thousands</h3>\n            <p className=\"text-muted-foreground\">Join our growing community of satisfied patients</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n            {statistics.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"flex justify-center mb-3\">\n                  <div className=\"p-2 rounded-lg bg-primary/10 text-primary\">\n                    {stat.icon}\n                  </div>\n                </div>\n                <div className=\"text-3xl font-bold text-primary mb-1\">{stat.number}</div>\n                <div className=\"font-medium mb-1\">{stat.label}</div>\n                <div className=\"text-xs text-muted-foreground\">{stat.description}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Emergency Support */}\n        <div className=\"mt-12 text-center\">\n          <Card className=\"bg-gradient-to-r from-primary/10 to-chart-1/10 border-primary/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-center gap-4\">\n                <div className=\"p-2 rounded-lg bg-primary/20 text-primary\">\n                  <Phone className=\"h-6 w-6\" />\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-semibold\">24/7 Emergency Support</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Call us at <span className=\"font-medium\">1800-AFFORD-CARE</span> for immediate assistance\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4582},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport HeroSection from \"@/components/HeroSection\";\nimport BudgetTierCard from \"@/components/BudgetTierCard\";\nimport DoctorCard from \"@/components/DoctorCard\";\nimport SearchInterface from \"@/components/SearchInterface\";\nimport BookingModal from \"@/components/BookingModal\";\nimport TrustSection from \"@/components/TrustSection\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart, Stethoscope, Building2, Loader } from \"lucide-react\";\nimport doctorPhoto from \"@assets/generated_images/Doctor_profile_photo_63744992.png\";\nimport type { Doctor } from \"@shared/schema\";\n\n// Mock data - todo: remove mock functionality\nconst budgetTiers = [\n  {\n    id: \"basic\",\n    title: \"Basic Care\",\n    price: \"₹10k\",\n    description: \"Essential healthcare for routine needs\",\n    features: [\n      \"General physician consultation\",\n      \"Basic diagnostic tests\",\n      \"Generic medication delivery\",\n      \"Health record maintenance\",\n      \"24/7 chat support\"\n    ],\n    icon: <Heart className=\"h-6 w-6\" />\n  },\n  {\n    id: \"specialist\",\n    title: \"Specialist Care\",\n    price: \"₹1L\",\n    description: \"Advanced care with specialist doctors\",\n    features: [\n      \"Specialist consultations\",\n      \"Advanced diagnostic tests\",\n      \"2 follow-up consultations\",\n      \"Treatment plan creation\",\n      \"Priority booking\",\n      \"Insurance claim support\"\n    ],\n    popular: true,\n    icon: <Stethoscope className=\"h-6 w-6\" />\n  },\n  {\n    id: \"premium\",\n    title: \"Premium Care\",\n    price: \"₹10L\",\n    description: \"Comprehensive care including surgeries\",\n    features: [\n      \"Complete surgical packages\",\n      \"Hospital partner network\",\n      \"EMI assistance available\",\n      \"Post-surgery care\",\n      \"Dedicated care coordinator\",\n      \"Insurance pre-authorization\",\n      \"Second opinion included\"\n    ],\n    icon: <Building2 className=\"h-6 w-6\" />\n  }\n];\n\nconst sampleDoctors = [\n  {\n    id: \"1\",\n    name: \"Priya Sharma\",\n    specialty: \"Cardiologist\",\n    experience: 12,\n    rating: 4.8,\n    reviewCount: 234,\n    consultationFee: 800,\n    location: \"Mumbai\",\n    nextAvailable: \"Today 3:00 PM\",\n    verified: true,\n    photo: doctorPhoto,\n    languages: [\"Hindi\", \"English\", \"Marathi\"],\n    availableToday: true\n  },\n  {\n    id: \"2\",\n    name: \"Rahul Kumar\",\n    specialty: \"General Physician\",\n    experience: 8,\n    rating: 4.6,\n    reviewCount: 156,\n    consultationFee: 500,\n    location: \"Delhi\",\n    nextAvailable: \"Tomorrow 10:00 AM\",\n    verified: true,\n    languages: [\"Hindi\", \"English\"],\n    availableToday: false\n  },\n  {\n    id: \"3\",\n    name: \"Anjali Patel\",\n    specialty: \"Dermatologist\",\n    experience: 15,\n    rating: 4.9,\n    reviewCount: 312,\n    consultationFee: 1200,\n    location: \"Bangalore\",\n    nextAvailable: \"Today 6:00 PM\",\n    verified: true,\n    languages: [\"English\", \"Gujarati\", \"Hindi\"],\n    availableToday: true\n  }\n];\n\n// Define the interface for transformed doctor data used by DoctorCard\ninterface TransformedDoctor {\n  id: string;\n  name: string;\n  specialty: string;\n  experience: number;\n  rating: number;\n  reviewCount: number;\n  consultationFee: number;\n  location: string;\n  nextAvailable: string;\n  verified: boolean;\n  photo: string;\n  languages: string[];\n  availableToday: boolean;\n}\n\nexport default function Home() {\n  const [selectedDoctor, setSelectedDoctor] = useState<TransformedDoctor | null>(null);\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n  const [showDoctors, setShowDoctors] = useState(false);\n  const [location, setLocation] = useLocation();\n  const [searchParams, setSearchParams] = useState<{\n    query?: string;\n    specialty?: string;\n    city?: string;\n    minRating?: number;\n    maxFee?: number;\n  }>({});\n\n  // Fetch doctors from API\n  const { data: doctors = [], isLoading, error } = useQuery({\n    queryKey: ['/api/doctors/search', searchParams],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchParams.query) params.append('query', searchParams.query);\n      if (searchParams.specialty) params.append('specialty', searchParams.specialty);\n      if (searchParams.city) params.append('city', searchParams.city);\n      if (searchParams.minRating) params.append('minRating', searchParams.minRating.toString());\n      if (searchParams.maxFee) params.append('maxFee', searchParams.maxFee.toString());\n      \n      const response = await fetch(`/api/doctors/search?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch doctors');\n      }\n      return response.json() as Promise<Doctor[]>;\n    },\n    enabled: showDoctors\n  });\n\n  const handleBookConsultation = (doctor: TransformedDoctor) => {\n    setSelectedDoctor(doctor);\n    setIsBookingModalOpen(true);\n  };\n\n  const handleViewProfile = (doctor: TransformedDoctor) => {\n    setLocation(`/doctor/${doctor.id}`);\n  };\n\n  const handleProfileClick = () => {\n    setLocation('/dashboard');\n  };\n\n  const handleSearch = (query: string, filters?: any) => {\n    setShowDoctors(true);\n    setSearchParams({\n      query: query || undefined,\n      specialty: filters?.specialty || undefined,\n      city: filters?.location || undefined,\n      minRating: filters?.rating ? parseFloat(filters.rating) : undefined,\n      maxFee: filters?.budgetRange ? parseFloat(filters.budgetRange) : undefined\n    });\n    console.log('Search executed:', { query, filters });\n  };\n\n  const handleBudgetTierSelect = (tier: any) => {\n    setShowDoctors(true);\n    // Map budget tier to max fee\n    const feeMapping: { [key: string]: number } = {\n      'basic': 500,\n      'specialist': 1000,\n      'premium': 2000\n    };\n    setSearchParams({\n      maxFee: feeMapping[tier.id] || undefined\n    });\n    console.log('Budget tier selected:', tier.title);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <Header \n        onSearch={handleSearch}\n        onProfileClick={handleProfileClick}\n        onMenuClick={() => console.log('Menu clicked')}\n      />\n\n      {/* Hero Section */}\n      <HeroSection \n        onSearch={handleSearch}\n        onGetStarted={() => setShowDoctors(true)}\n      />\n\n      {/* Budget Tiers Section */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"container px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Choose Your Healthcare Budget</h2>\n            <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n              Transparent pricing for every healthcare need. No hidden costs, no surprises.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n            {budgetTiers.map((tier) => (\n              <BudgetTierCard\n                key={tier.id}\n                tier={tier}\n                onSelect={handleBudgetTierSelect}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Search Interface */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold mb-2\">Find the Right Doctor</h2>\n              <p className=\"text-muted-foreground\">\n                Search by specialty, budget, location, and availability\n              </p>\n            </div>\n            <SearchInterface onSearch={handleSearch} />\n          </div>\n        </div>\n      </section>\n\n      {/* Doctors Section */}\n      {showDoctors && (\n        <section className=\"py-16 bg-background\">\n          <div className=\"container px-4\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Available Doctors</h2>\n                <p className=\"text-muted-foreground\">\n                  {isLoading ? 'Searching...' : \n                   error ? 'Error loading doctors' : \n                   `${doctors.length} doctors found matching your criteria`}\n                </p>\n              </div>\n              <ThemeToggle />\n            </div>\n            \n            {isLoading && (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin\" />\n                <span className=\"ml-2\">Loading doctors...</span>\n              </div>\n            )}\n            \n            {error && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-destructive mb-4\">Failed to load doctors. Please try again.</p>\n                <Button onClick={() => setShowDoctors(false)}>Go Back</Button>\n              </div>\n            )}\n            \n            {!isLoading && !error && doctors.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground mb-4\">No doctors found matching your criteria.</p>\n                <p className=\"text-sm text-muted-foreground\">Try adjusting your search filters.</p>\n              </div>\n            )}\n            \n            {!isLoading && !error && doctors.length > 0 && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {doctors.map((doctor) => {\n                  // Transform doctor data to match DoctorCard expectations\n                  const transformedDoctor = {\n                    id: doctor.id,\n                    name: doctor.fullName,\n                    specialty: doctor.primarySpecialty,\n                    experience: doctor.yearsOfExperience,\n                    rating: parseFloat(doctor.rating || '0'),\n                    reviewCount: doctor.totalReviews || 0,\n                    consultationFee: parseFloat(doctor.consultationFee),\n                    location: `${doctor.city}, ${doctor.state}`,\n                    nextAvailable: \"Available today\", // TODO: Implement availability\n                    verified: doctor.verificationStatus === 'verified',\n                    photo: doctor.profilePhoto || doctorPhoto,\n                    languages: doctor.languages || ['English'],\n                    availableToday: doctor.isActive || false\n                  };\n                  \n                  return (\n                    <DoctorCard\n                      key={doctor.id}\n                      doctor={transformedDoctor}\n                      onBookConsultation={() => handleBookConsultation(transformedDoctor)}\n                      onViewProfile={() => handleViewProfile(transformedDoctor)}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Trust Section */}\n      <TrustSection />\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-primary text-primary-foreground\">\n        <div className=\"container px-4 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 text-primary-foreground/90\">\n            Join thousands of satisfied patients who found quality healthcare within their budget\n          </p>\n          <Button \n            size=\"lg\" \n            variant=\"secondary\"\n            onClick={() => setShowDoctors(true)}\n            data-testid=\"button-cta-start\"\n          >\n            Find Your Doctor Now\n          </Button>\n        </div>\n      </section>\n\n      {/* Booking Modal */}\n      <BookingModal\n        isOpen={isBookingModalOpen}\n        onClose={() => setIsBookingModalOpen(false)}\n        doctor={selectedDoctor}\n        onConfirmBooking={(bookingData) => {\n          console.log('Booking confirmed:', bookingData);\n          alert('Booking confirmed! You will receive a confirmation email shortly.');\n        }}\n      />\n    </div>\n  );\n}","size_bytes":12127},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport BookingModal from '../BookingModal';\nimport doctorPhoto from \"@assets/generated_images/Doctor_profile_photo_63744992.png\";\n\nconst sampleDoctor = {\n  id: \"1\",\n  name: \"Priya Sharma\",\n  specialty: \"Cardiologist\",\n  consultationFee: 800,\n  photo: doctorPhoto\n};\n\nexport default function BookingModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"p-6\">\n      <Button onClick={() => setIsOpen(true)} data-testid=\"button-open-booking\">\n        Open Booking Modal\n      </Button>\n      \n      <BookingModal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        doctor={sampleDoctor}\n        onConfirmBooking={(bookingData) => console.log('Booking confirmed:', bookingData)}\n      />\n    </div>\n  );\n}","size_bytes":846},"client/src/components/examples/BudgetTierCard.tsx":{"content":"import { Heart, Stethoscope, Building2 } from \"lucide-react\";\nimport BudgetTierCard from '../BudgetTierCard';\n\nconst sampleTiers = [\n  {\n    id: \"basic\",\n    title: \"Basic Care\",\n    price: \"₹10k\",\n    description: \"Essential healthcare for routine needs\",\n    features: [\n      \"General physician consultation\",\n      \"Basic diagnostic tests\",\n      \"Generic medication delivery\",\n      \"Health record maintenance\",\n      \"24/7 chat support\"\n    ],\n    icon: <Heart className=\"h-6 w-6\" />\n  },\n  {\n    id: \"specialist\",\n    title: \"Specialist Care\",\n    price: \"₹1L\",\n    description: \"Advanced care with specialist doctors\",\n    features: [\n      \"Specialist consultations\",\n      \"Advanced diagnostic tests\",\n      \"2 follow-up consultations\",\n      \"Treatment plan creation\",\n      \"Priority booking\",\n      \"Insurance claim support\"\n    ],\n    popular: true,\n    icon: <Stethoscope className=\"h-6 w-6\" />\n  },\n  {\n    id: \"premium\",\n    title: \"Premium Care\",\n    price: \"₹10L\",\n    description: \"Comprehensive care including surgeries\",\n    features: [\n      \"Complete surgical packages\",\n      \"Hospital partner network\",\n      \"EMI assistance available\",\n      \"Post-surgery care\",\n      \"Dedicated care coordinator\",\n      \"Insurance pre-authorization\",\n      \"Second opinion included\"\n    ],\n    icon: <Building2 className=\"h-6 w-6\" />\n  }\n];\n\nexport default function BudgetTierCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-6\">\n      {sampleTiers.map((tier) => (\n        <BudgetTierCard\n          key={tier.id}\n          tier={tier}\n          onSelect={(selectedTier) => console.log('Selected tier:', selectedTier.title)}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1717},"client/src/components/examples/CareCoordination.tsx":{"content":"import CareCoordination from '../CareCoordination';\n\nconst sampleCareTeam = [\n  {\n    id: \"ct-001\",\n    name: \"Priya Sharma\",\n    role: \"primary_physician\" as const,\n    specialty: \"Internal Medicine\",\n    profilePhoto: \"/images/doctor1.jpg\",\n    contactInfo: {\n      phone: \"+91 98765 43210\",\n      email: \"priya.sharma@hospital.com\",\n      hospital: \"Apollo Hospital, Mumbai\"\n    },\n    joinedDate: \"2024-01-15\",\n    isActive: true,\n    lastActivity: \"2 hours ago\"\n  },\n  {\n    id: \"ct-002\",\n    name: \"Rajesh Patel\",\n    role: \"specialist\" as const,\n    specialty: \"Cardiology\",\n    contactInfo: {\n      phone: \"+91 98765 43211\",\n      email: \"rajesh.patel@hospital.com\",\n      hospital: \"Fortis Hospital, Mumbai\"\n    },\n    joinedDate: \"2024-02-10\",\n    isActive: true,\n    lastActivity: \"1 day ago\"\n  },\n  {\n    id: \"ct-003\",\n    name: \"Anita Desai\",\n    role: \"nurse\" as const,\n    specialty: \"Cardiac Nursing\",\n    contactInfo: {\n      phone: \"+91 98765 43212\",\n      email: \"anita.desai@hospital.com\",\n      hospital: \"Apollo Hospital, Mumbai\"\n    },\n    joinedDate: \"2024-01-20\",\n    isActive: true,\n    lastActivity: \"30 minutes ago\"\n  }\n];\n\nconst sampleReferrals = [\n  {\n    id: \"ref-001\",\n    fromDoctorId: \"ct-001\",\n    fromDoctorName: \"Priya Sharma\",\n    toDoctorId: \"ct-002\",\n    toDoctorName: \"Rajesh Patel\",\n    specialty: \"Cardiology\",\n    priority: \"urgent\" as const,\n    reason: \"Suspected coronary artery disease based on ECG findings\",\n    clinicalNotes: \"Patient presents with chest pain on exertion, abnormal ECG showing ST-segment changes. Recommend stress test and echocardiogram.\",\n    attachments: [\"ecg-report.pdf\", \"blood-test-results.pdf\"],\n    status: \"pending\" as const,\n    requestedDate: \"2024-09-15\",\n    appointmentDate: \"2024-09-18\"\n  },\n  {\n    id: \"ref-002\",\n    fromDoctorId: \"ct-002\",\n    fromDoctorName: \"Rajesh Patel\",\n    toDoctorId: \"ct-004\",\n    toDoctorName: \"Sarah Johnson\",\n    specialty: \"Endocrinology\",\n    priority: \"routine\" as const,\n    reason: \"Diabetes management and insulin optimization\",\n    clinicalNotes: \"Type 2 diabetes with suboptimal glycemic control. HbA1c 8.2%. Patient may benefit from insulin therapy adjustment.\",\n    attachments: [\"hba1c-report.pdf\"],\n    status: \"accepted\" as const,\n    requestedDate: \"2024-09-10\",\n    appointmentDate: \"2024-09-22\"\n  }\n];\n\nconst sampleCommunications = [\n  {\n    id: \"comm-001\",\n    subject: \"Patient Care Plan Review - Rajesh Kumar\",\n    participants: [\"ct-001\", \"ct-002\", \"ct-003\"],\n    messages: [\n      {\n        id: \"msg-001\",\n        senderId: \"ct-001\",\n        senderName: \"Dr. Priya Sharma\",\n        content: \"I'd like to discuss the care plan for Mr. Rajesh Kumar. His recent cardiac evaluation shows improvement, but we need to coordinate his diabetes management.\",\n        timestamp: \"2024-09-15 10:30 AM\",\n        isUrgent: false\n      },\n      {\n        id: \"msg-002\",\n        senderId: \"ct-002\",\n        senderName: \"Dr. Rajesh Patel\",\n        content: \"Cardiac status is stable. Echo shows improved EF. We can safely proceed with diabetes optimization. Suggest endocrinology consult.\",\n        timestamp: \"2024-09-15 11:15 AM\",\n        isUrgent: false\n      },\n      {\n        id: \"msg-003\",\n        senderId: \"ct-003\",\n        senderName: \"Anita Desai\",\n        content: \"Patient education completed. He's compliant with medications and monitoring. BP trending down nicely.\",\n        timestamp: \"2024-09-15 02:20 PM\",\n        isUrgent: false\n      }\n    ],\n    status: \"active\" as const,\n    createdAt: \"2024-09-15\",\n    lastActivity: \"2 hours ago\"\n  },\n  {\n    id: \"comm-002\",\n    subject: \"Urgent: Blood Pressure Spike - Emergency Protocol\",\n    participants: [\"ct-001\", \"ct-003\"],\n    messages: [\n      {\n        id: \"msg-004\",\n        senderId: \"ct-003\",\n        senderName: \"Anita Desai\",\n        content: \"Patient reporting severe headache and BP reading 180/110. Administered sublingual nitroglycerin as per protocol. Awaiting instructions.\",\n        timestamp: \"2024-09-16 08:45 AM\",\n        isUrgent: true\n      },\n      {\n        id: \"msg-005\",\n        senderId: \"ct-001\",\n        senderName: \"Dr. Priya Sharma\",\n        content: \"Thank you for quick response. Please administer IV hydralazine 10mg and monitor every 15 minutes. I'm en route to hospital. Call if BP doesn't respond in 30 minutes.\",\n        timestamp: \"2024-09-16 08:52 AM\",\n        isUrgent: true\n      }\n    ],\n    status: \"active\" as const,\n    createdAt: \"2024-09-16\",\n    lastActivity: \"30 minutes ago\"\n  }\n];\n\nconst sampleHandoffs = [\n  {\n    id: \"ho-001\",\n    fromDoctorId: \"ct-001\",\n    fromDoctorName: \"Priya Sharma\",\n    toDoctorId: \"ct-005\",\n    toDoctorName: \"Michael Chen\",\n    patientCondition: \"Stable, post-cardiac catheterization\",\n    handoffReason: \"Vacation coverage - returning Monday\",\n    clinicalSummary: \"65-year-old male, post-PCI with drug-eluting stent to LAD. Dual antiplatelet therapy initiated. No complications. Scheduled for follow-up echo in 1 week.\",\n    currentMedications: [\"Aspirin 81mg\", \"Clopidogrel 75mg\", \"Atorvastatin 80mg\", \"Metoprolol 50mg\"],\n    pendingTasks: [\n      \"Review echo results due Friday\",\n      \"Adjust beta-blocker dose based on heart rate\",\n      \"Schedule cardiac rehab consultation\"\n    ],\n    urgentAlerts: [\n      \"Watch for signs of stent thrombosis\",\n      \"Patient allergic to contrast dye - documented\"\n    ],\n    handoffDate: \"2024-09-14\",\n    status: \"accepted\" as const\n  }\n];\n\nexport default function CareCoordinationExample() {\n  return (\n    <div className=\"p-6\">\n      <CareCoordination \n        patientId=\"P-2024-001\"\n        careTeam={sampleCareTeam}\n        referrals={sampleReferrals}\n        communications={sampleCommunications}\n        handoffs={sampleHandoffs}\n        onAddTeamMember={(member) => console.log('Add team member:', member)}\n        onCreateReferral={(referral) => console.log('Create referral:', referral)}\n        onSendMessage={(threadId, message, isUrgent) => console.log('Send message:', { threadId, message, isUrgent })}\n        onHandoffPatient={(handoff) => console.log('Patient handoff:', handoff)}\n      />\n    </div>\n  );\n}","size_bytes":6134},"client/src/components/examples/DoctorCard.tsx":{"content":"import DoctorCard from '../DoctorCard';\nimport doctorPhoto from \"@assets/generated_images/Doctor_profile_photo_63744992.png\";\n\nconst sampleDoctors = [\n  {\n    id: \"1\",\n    name: \"Priya Sharma\",\n    specialty: \"Cardiologist\",\n    experience: 12,\n    rating: 4.8,\n    reviewCount: 234,\n    consultationFee: 800,\n    location: \"Mumbai\",\n    nextAvailable: \"Today 3:00 PM\",\n    verified: true,\n    photo: doctorPhoto,\n    languages: [\"Hindi\", \"English\", \"Marathi\"],\n    availableToday: true\n  },\n  {\n    id: \"2\", \n    name: \"Rahul Kumar\",\n    specialty: \"General Physician\",\n    experience: 8,\n    rating: 4.6,\n    reviewCount: 156,\n    consultationFee: 500,\n    location: \"Delhi\",\n    nextAvailable: \"Tomorrow 10:00 AM\",\n    verified: true,\n    languages: [\"Hindi\", \"English\"],\n    availableToday: false\n  },\n  {\n    id: \"3\",\n    name: \"Anjali Patel\",\n    specialty: \"Dermatologist\", \n    experience: 15,\n    rating: 4.9,\n    reviewCount: 312,\n    consultationFee: 1200,\n    location: \"Bangalore\",\n    nextAvailable: \"Today 6:00 PM\",\n    verified: true,\n    languages: [\"English\", \"Gujarati\", \"Hindi\"],\n    availableToday: true\n  }\n];\n\nexport default function DoctorCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n      {sampleDoctors.map((doctor) => (\n        <DoctorCard\n          key={doctor.id}\n          doctor={doctor}\n          onBookConsultation={(doc) => console.log('Book consultation with:', doc.name)}\n          onViewProfile={(doc) => console.log('View profile of:', doc.name)}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1584},"client/src/components/examples/EmergencyTriageSystem.tsx":{"content":"import EmergencyTriageSystem from '../EmergencyTriageSystem';\n\nexport default function EmergencyTriageSystemExample() {\n  return (\n    <div className=\"p-6\">\n      <EmergencyTriageSystem \n        onCreateEmergency={(emergencyCase) => console.log('Emergency case created:', emergencyCase)}\n        onAssignDoctor={(caseId, doctorId) => console.log('Doctor assigned:', { caseId, doctorId })}\n        onEscalate={(caseId, escalationType) => console.log('Emergency escalated:', { caseId, escalationType })}\n      />\n    </div>\n  );\n}","size_bytes":528},"client/src/components/examples/EnhancedDoctorProfile.tsx":{"content":"import EnhancedDoctorProfile from '../EnhancedDoctorProfile';\nimport doctorPhoto from \"@assets/generated_images/Doctor_profile_photo_63744992.png\";\n\nconst sampleDetailedDoctor = {\n  id: \"1\",\n  name: \"Priya Sharma\",\n  profilePhoto: doctorPhoto,\n  primarySpecialty: \"Interventional Cardiology\",\n  subSpecialties: [\"Coronary Angioplasty\", \"Structural Heart Disease\", \"Heart Failure Management\"],\n  yearsOfExperience: 15,\n  consultationFee: 1500,\n  rating: 4.9,\n  totalConsultations: 2847,\n  totalReviews: 892,\n  \n  credentials: {\n    medicalLicense: \"MH-12345-CD-2023\",\n    licenseState: \"Maharashtra\",\n    licenseExpiry: \"2025-12-31\",\n    boardCertifications: [\n      \"American Board of Internal Medicine - Cardiology\",\n      \"European Society of Cardiology - Interventional Cardiology\",\n      \"Indian Association of Cardiovascular and Thoracic Surgeons\"\n    ],\n    fellowships: [\n      \"Interventional Cardiology Fellowship - Mayo Clinic\",\n      \"Advanced Heart Failure Fellowship - Cleveland Clinic\"\n    ]\n  },\n  \n  education: {\n    medicalSchool: \"All Institute of Medical Sciences (AIIMS), New Delhi\",\n    residency: \"Internal Medicine Residency - AIIMS, New Delhi\",\n    fellowship: \"Cardiology Fellowship - PGIMER, Chandigarh\",\n    graduationYear: 2008\n  },\n  \n  hospitalAffiliations: [\n    \"Kokilaben Dhirubhai Ambani Hospital\",\n    \"Jaslok Hospital & Research Centre\",\n    \"Breach Candy Hospital Trust\",\n    \"Asian Heart Institute\"\n  ],\n  \n  specialInterests: [\n    \"Complex Coronary Interventions\",\n    \"Transcatheter Aortic Valve Replacement (TAVR)\",\n    \"Mitral Valve Repair\",\n    \"Cardiac Catheterization\",\n    \"Preventive Cardiology\"\n  ],\n  \n  languages: [\"English\", \"Hindi\", \"Marathi\", \"Gujarati\"],\n  \n  city: \"Mumbai\",\n  state: \"Maharashtra\",\n  \n  availableHours: {\n    monday: [{ start: \"09:00\", end: \"13:00\" }, { start: \"15:00\", end: \"18:00\" }],\n    tuesday: [{ start: \"09:00\", end: \"13:00\" }, { start: \"15:00\", end: \"18:00\" }],\n    wednesday: [{ start: \"09:00\", end: \"13:00\" }],\n    thursday: [{ start: \"09:00\", end: \"13:00\" }, { start: \"15:00\", end: \"18:00\" }],\n    friday: [{ start: \"09:00\", end: \"13:00\" }, { start: \"15:00\", end: \"18:00\" }],\n    saturday: [{ start: \"09:00\", end: \"12:00\" }]\n  },\n  \n  nextAvailable: \"Today 3:00 PM\",\n  \n  researchPublications: [\n    {\n      title: \"Outcomes of Transcatheter Aortic Valve Replacement in Indian Population\",\n      journal: \"Indian Heart Journal\",\n      year: 2023,\n      citations: 127\n    },\n    {\n      title: \"Complex Coronary Interventions: A Multi-center Study\",\n      journal: \"Journal of Interventional Cardiology\",\n      year: 2022,\n      citations: 89\n    },\n    {\n      title: \"Heart Failure Management in Resource-Limited Settings\",\n      journal: \"International Journal of Cardiology\",\n      year: 2021,\n      citations: 156\n    }\n  ],\n  \n  awards: [\n    {\n      title: \"Outstanding Physician Award\",\n      organization: \"Cardiological Society of India\",\n      year: 2023\n    },\n    {\n      title: \"Excellence in Interventional Cardiology\",\n      organization: \"Indian Association of Cardiovascular Surgeons\",\n      year: 2022\n    },\n    {\n      title: \"Young Investigator Award\",\n      organization: \"European Society of Cardiology\",\n      year: 2019\n    }\n  ],\n  \n  bio: \"Dr. Priya Sharma is a renowned interventional cardiologist with over 15 years of experience in complex cardiac procedures. She specializes in minimally invasive cardiac interventions and has pioneered several techniques in transcatheter valve procedures. Dr. Sharma is actively involved in research and has published extensively in peer-reviewed journals. She is committed to providing personalized cardiac care with a focus on patient education and preventive cardiology.\",\n  \n  patientSatisfactionScore: 97,\n  averageResponseTime: \"< 2 hours\",\n  providesEmergencyConsults: true,\n  consultationTypes: [\"Video Consultation\", \"Audio Consultation\", \"In-person Visit\", \"Emergency Consultation\", \"Second Opinion\"]\n};\n\nexport default function EnhancedDoctorProfileExample() {\n  return (\n    <div className=\"p-6\">\n      <EnhancedDoctorProfile \n        doctor={sampleDetailedDoctor}\n        onBookConsultation={(doctor) => console.log('Book consultation:', doctor.name)}\n        onEmergencyConsult={(doctor) => console.log('Emergency consultation:', doctor.name)}\n        onSendMessage={(doctor) => console.log('Send message to:', doctor.name)}\n      />\n    </div>\n  );\n}","size_bytes":4416},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return (\n    <Header \n      onMenuClick={() => console.log('Menu clicked')}\n      onProfileClick={() => console.log('Profile clicked')}\n      onSearch={(query) => console.log('Search for:', query)}\n    />\n  );\n}","size_bytes":288},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return (\n    <HeroSection \n      onSearch={(query) => console.log('Hero search:', query)}\n      onGetStarted={() => console.log('Get started clicked')}\n    />\n  );\n}","size_bytes":257},"client/src/components/examples/MedicalDocumentManager.tsx":{"content":"import MedicalDocumentManager from '../MedicalDocumentManager';\n\nconst sampleDocuments = [\n  {\n    id: \"doc-001\",\n    fileName: \"Blood Test Results - Complete Blood Count\",\n    documentType: \"lab_report\" as const,\n    fileUrl: \"/documents/blood-test-001.pdf\",\n    fileSize: 2048576, // 2MB\n    mimeType: \"application/pdf\",\n    uploadedBy: \"Dr. Priya Sharma\",\n    uploadDate: \"2024-09-15\",\n    documentDate: \"2024-09-14\",\n    issuingProvider: \"Apollo Diagnostics, Mumbai\",\n    tags: [\"CBC\", \"Routine\", \"Normal\"],\n    isActive: true,\n    sharedWith: [\n      {\n        doctorId: \"dr-001\",\n        doctorName: \"Dr. Amit Patel\",\n        sharedAt: \"2024-09-16\",\n        accessLevel: \"view\" as const\n      }\n    ],\n    summary: \"Complete blood count showing normal hemoglobin levels and white cell count within normal range.\",\n    patientId: \"P-2024-001\"\n  },\n  {\n    id: \"doc-002\",\n    fileName: \"Diabetes Medication Prescription\",\n    documentType: \"prescription\" as const,\n    fileUrl: \"/documents/prescription-002.pdf\",\n    fileSize: 1024000, // 1MB\n    mimeType: \"application/pdf\",\n    uploadedBy: \"Dr. Meera Singh\",\n    uploadDate: \"2024-09-10\",\n    documentDate: \"2024-09-10\",\n    issuingProvider: \"Fortis Hospital, Mumbai\",\n    tags: [\"Diabetes\", \"Metformin\", \"3-month\"],\n    isActive: true,\n    sharedWith: [],\n    summary: \"3-month prescription for Metformin 500mg twice daily for Type 2 diabetes management.\",\n    expiryDate: \"2024-12-10\",\n    patientId: \"P-2024-001\"\n  },\n  {\n    id: \"doc-003\",\n    fileName: \"Chest X-Ray - Pneumonia Follow-up\",\n    documentType: \"imaging\" as const,\n    fileUrl: \"/documents/xray-003.jpg\",\n    fileSize: 5242880, // 5MB\n    mimeType: \"image/jpeg\",\n    uploadedBy: \"Dr. Ravi Kumar\",\n    uploadDate: \"2024-08-20\",\n    documentDate: \"2024-08-19\",\n    issuingProvider: \"Max Healthcare, Delhi\",\n    tags: [\"X-Ray\", \"Chest\", \"Follow-up\", \"Clear\"],\n    isActive: true,\n    sharedWith: [\n      {\n        doctorId: \"dr-002\",\n        doctorName: \"Dr. Sarah Johnson\",\n        sharedAt: \"2024-08-21\",\n        accessLevel: \"download\" as const\n      },\n      {\n        doctorId: \"dr-003\",\n        doctorName: \"Dr. Michael Chen\",\n        sharedAt: \"2024-08-22\",\n        accessLevel: \"full\" as const\n      }\n    ],\n    summary: \"Chest X-ray showing clear lungs with complete resolution of previous pneumonia.\",\n    patientId: \"P-2024-001\"\n  },\n  {\n    id: \"doc-004\",\n    fileName: \"Cardiology Consultation Notes\",\n    documentType: \"consultation_notes\" as const,\n    fileUrl: \"/documents/consultation-004.pdf\",\n    fileSize: 512000, // 512KB\n    mimeType: \"application/pdf\",\n    uploadedBy: \"Dr. Anjali Gupta\",\n    uploadDate: \"2024-07-15\",\n    documentDate: \"2024-07-15\",\n    issuingProvider: \"Asian Heart Institute, Mumbai\",\n    tags: [\"Cardiology\", \"Hypertension\", \"ECG\", \"Normal\"],\n    isActive: true,\n    sharedWith: [\n      {\n        doctorId: \"dr-001\",\n        doctorName: \"Dr. Amit Patel\",\n        sharedAt: \"2024-07-16\",\n        accessLevel: \"view\" as const\n      }\n    ],\n    summary: \"Cardiology consultation for hypertension management. ECG normal, blood pressure controlled.\",\n    patientId: \"P-2024-001\"\n  },\n  {\n    id: \"doc-005\",\n    fileName: \"Insurance Claim - Hospitalization\",\n    documentType: \"insurance_claim\" as const,\n    fileUrl: \"/documents/insurance-005.pdf\",\n    fileSize: 3145728, // 3MB\n    mimeType: \"application/pdf\",\n    uploadedBy: \"Hospital Admin\",\n    uploadDate: \"2024-06-01\",\n    documentDate: \"2024-05-28\",\n    issuingProvider: \"Star Health Insurance\",\n    tags: [\"Insurance\", \"Hospitalization\", \"Approved\", \"₹45000\"],\n    isActive: true,\n    sharedWith: [],\n    summary: \"Insurance claim for 3-day hospitalization. Claim amount ₹45,000 - Approved and processed.\",\n    expiryDate: \"2025-05-28\",\n    patientId: \"P-2024-001\"\n  },\n  {\n    id: \"doc-006\",\n    fileName: \"COVID-19 Vaccination Certificate\",\n    documentType: \"vaccination_record\" as const,\n    fileUrl: \"/documents/vaccine-006.pdf\",\n    fileSize: 256000, // 256KB\n    mimeType: \"application/pdf\",\n    uploadedBy: \"Vaccination Center\",\n    uploadDate: \"2024-01-15\",\n    documentDate: \"2024-01-15\",\n    issuingProvider: \"Government Hospital, Mumbai\",\n    tags: [\"COVID-19\", \"Booster\", \"Covishield\", \"Complete\"],\n    isActive: true,\n    sharedWith: [],\n    summary: \"COVID-19 booster vaccination (3rd dose) - Covishield vaccine administered.\",\n    patientId: \"P-2024-001\"\n  }\n];\n\nexport default function MedicalDocumentManagerExample() {\n  return (\n    <div className=\"p-6\">\n      <MedicalDocumentManager \n        patientId=\"P-2024-001\"\n        documents={sampleDocuments}\n        onUploadDocument={(file, metadata) => console.log('Upload document:', { file, metadata })}\n        onShareDocument={(documentId, shareInfo) => console.log('Share document:', { documentId, shareInfo })}\n        onDownloadDocument={(documentId) => console.log('Download document:', documentId)}\n        onDeleteDocument={(documentId) => console.log('Delete document:', documentId)}\n      />\n    </div>\n  );\n}","size_bytes":5011},"client/src/components/examples/PatientHealthRecord.tsx":{"content":"import PatientHealthRecord from '../PatientHealthRecord';\n\n// Mock patient data - todo: remove mock functionality\nconst samplePatient = {\n  id: \"P-2024-001\",\n  fullName: \"Rajesh Kumar Sharma\",\n  dateOfBirth: \"1985-03-15\",\n  age: 39,\n  gender: \"male\" as const,\n  bloodGroup: \"B+\",\n  phoneNumber: \"+91 98765 43210\",\n  email: \"rajesh.sharma@email.com\",\n  address: {\n    street: \"123 MG Road, Sector 15\",\n    city: \"Mumbai\",\n    state: \"Maharashtra\",\n    pincode: \"400001\"\n  },\n  emergencyContacts: [\n    {\n      name: \"Priya Sharma\",\n      relationship: \"wife\",\n      phoneNumber: \"+91 98765 43211\",\n      email: \"priya.sharma@email.com\"\n    },\n    {\n      name: \"Dr. Amit Patel\",\n      relationship: \"family doctor\",\n      phoneNumber: \"+91 98765 43212\"\n    }\n  ],\n  \n  allergies: [\n    {\n      allergen: \"Penicillin\",\n      severity: \"severe\" as const,\n      reaction: \"Rash, difficulty breathing\",\n      confirmedDate: \"2019-08-12\"\n    },\n    {\n      allergen: \"Shellfish\",\n      severity: \"moderate\" as const,\n      reaction: \"Hives, nausea\",\n      confirmedDate: \"2020-05-20\"\n    }\n  ],\n  \n  chronicConditions: [\"Type 2 Diabetes\", \"Hypertension\"],\n  \n  medicalHistory: [\n    {\n      condition: \"Type 2 Diabetes Mellitus\",\n      diagnosedDate: \"2018-11-15\",\n      status: \"chronic\" as const,\n      treatingPhysician: \"Dr. Meera Singh\",\n      notes: \"Well controlled with medication and lifestyle modifications. HbA1c maintained below 7%.\"\n    },\n    {\n      condition: \"Essential Hypertension\",\n      diagnosedDate: \"2020-02-10\",\n      status: \"chronic\" as const,\n      treatingPhysician: \"Dr. Amit Patel\",\n      notes: \"Controlled with ACE inhibitors. Regular monitoring required.\"\n    },\n    {\n      condition: \"Appendicitis\",\n      diagnosedDate: \"2016-07-22\",\n      status: \"resolved\" as const,\n      treatingPhysician: \"Dr. Ravi Kumar\",\n      notes: \"Laparoscopic appendectomy performed. Complete recovery.\"\n    }\n  ],\n  \n  currentMedications: [\n    {\n      name: \"Metformin\",\n      dosage: \"500mg\",\n      frequency: \"Twice daily\",\n      startDate: \"2018-11-15\",\n      prescribedBy: \"Dr. Meera Singh\",\n      purpose: \"Blood sugar control\",\n      status: \"active\" as const\n    },\n    {\n      name: \"Lisinopril\",\n      dosage: \"10mg\",\n      frequency: \"Once daily\",\n      startDate: \"2020-02-10\",\n      prescribedBy: \"Dr. Amit Patel\",\n      purpose: \"Blood pressure control\",\n      status: \"active\" as const\n    },\n    {\n      name: \"Atorvastatin\",\n      dosage: \"20mg\",\n      frequency: \"Once daily at bedtime\",\n      startDate: \"2021-01-05\",\n      prescribedBy: \"Dr. Meera Singh\",\n      purpose: \"Cholesterol management\",\n      status: \"active\" as const\n    }\n  ],\n  \n  familyHistory: [\n    {\n      relation: \"father\",\n      conditions: [\"Type 2 Diabetes\", \"Coronary Artery Disease\"],\n      ageAtDiagnosis: 55,\n      notes: \"Diagnosed with diabetes at 55, had heart attack at 62\"\n    },\n    {\n      relation: \"mother\",\n      conditions: [\"Hypertension\", \"Osteoporosis\"],\n      ageAtDiagnosis: 60,\n      notes: \"Hypertension since age 60, osteoporosis diagnosed at 65\"\n    },\n    {\n      relation: \"paternal grandfather\",\n      conditions: [\"Stroke\"],\n      ageAtDiagnosis: 70,\n      notes: \"Had stroke at age 70, recovered partially\"\n    }\n  ],\n  \n  vitalSigns: [\n    {\n      date: \"2024-09-15\",\n      bloodPressure: { systolic: 128, diastolic: 82 },\n      heartRate: 72,\n      temperature: 98.6,\n      weight: 78.5,\n      height: 175,\n      bmi: 25.6\n    },\n    {\n      date: \"2024-06-10\",\n      bloodPressure: { systolic: 132, diastolic: 85 },\n      heartRate: 75,\n      temperature: 98.4,\n      weight: 79.2,\n      height: 175,\n      bmi: 25.9\n    },\n    {\n      date: \"2024-03-12\",\n      bloodPressure: { systolic: 135, diastolic: 88 },\n      heartRate: 78,\n      temperature: 98.7,\n      weight: 80.1,\n      height: 175,\n      bmi: 26.2\n    }\n  ],\n  \n  insuranceProvider: \"Star Health Insurance\",\n  policyNumber: \"SH-123456789\",\n  preferredBudgetRange: \"specialist\" as const,\n  \n  registrationDate: \"2022-01-15\",\n  lastVisit: \"2024-09-15\",\n  totalConsultations: 12,\n  preferredLanguages: [\"Hindi\", \"English\", \"Marathi\"]\n};\n\nexport default function PatientHealthRecordExample() {\n  return (\n    <div className=\"p-6\">\n      <PatientHealthRecord \n        patient={samplePatient}\n        isEditable={true}\n        onUpdateRecord={(updates) => console.log('Update patient record:', updates)}\n        onAddMedication={(medication) => console.log('Add medication:', medication)}\n        onAddAllergy={(allergy) => console.log('Add allergy:', allergy)}\n        onAddVitalSigns={(vitals) => console.log('Add vital signs:', vitals)}\n      />\n    </div>\n  );\n}","size_bytes":4660},"client/src/components/examples/SearchInterface.tsx":{"content":"import SearchInterface from '../SearchInterface';\n\nexport default function SearchInterfaceExample() {\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <SearchInterface \n        onSearch={(query, filters) => console.log('Search executed:', { query, filters })}\n        onClearFilters={() => console.log('Filters cleared')}\n      />\n    </div>\n  );\n}","size_bytes":360},"client/src/components/examples/SymptomChecker.tsx":{"content":"import SymptomChecker from '../SymptomChecker';\n\nexport default function SymptomCheckerExample() {\n  return (\n    <div className=\"p-6\">\n      <SymptomChecker \n        onGetRecommendations={(symptoms, results) => console.log('Symptom analysis:', { symptoms, results })}\n        onBookConsultation={(specialist) => console.log('Book consultation with:', specialist)}\n      />\n    </div>\n  );\n}","size_bytes":391},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-6\">\n      <ThemeToggle />\n    </div>\n  );\n}","size_bytes":166},"client/src/components/examples/TrustSection.tsx":{"content":"import TrustSection from '../TrustSection';\n\nexport default function TrustSectionExample() {\n  return <TrustSection />;\n}","size_bytes":121},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/DoctorProfile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport BookingModal from \"@/components/BookingModal\";\nimport { \n  ArrowLeft, \n  Star, \n  MapPin, \n  Calendar, \n  Clock, \n  Shield, \n  GraduationCap, \n  Award,\n  MessageCircle,\n  Video,\n  Phone,\n  Loader\n} from \"lucide-react\";\nimport type { Doctor } from \"@shared/schema\";\nimport doctorPhoto from \"@assets/generated_images/Doctor_profile_photo_63744992.png\";\n\nexport default function DoctorProfile() {\n  const [match, params] = useRoute(\"/doctor/:id\");\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n  const [location, setLocation] = useLocation();\n  \n  const doctorId = params?.id;\n\n  const { data: doctor, isLoading, error } = useQuery({\n    queryKey: ['/api/doctors', doctorId],\n    queryFn: async () => {\n      if (!doctorId) throw new Error('No doctor ID provided');\n      const response = await fetch(`/api/doctors/${doctorId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch doctor details');\n      }\n      return response.json() as Promise<Doctor>;\n    },\n    enabled: !!doctorId\n  });\n\n  if (!match) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"flex items-center gap-2\">\n          <Loader className=\"h-6 w-6 animate-spin\" />\n          <span>Loading doctor profile...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !doctor) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Doctor Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">The doctor you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/')}>Go Back to Home</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleBookConsultation = () => {\n    setIsBookingModalOpen(true);\n  };\n\n  const transformedDoctor = {\n    id: doctor.id,\n    name: doctor.fullName,\n    specialty: doctor.primarySpecialty,\n    experience: doctor.yearsOfExperience,\n    rating: parseFloat(doctor.rating || '0'),\n    reviewCount: doctor.totalReviews || 0,\n    consultationFee: parseFloat(doctor.consultationFee),\n    location: `${doctor.city}, ${doctor.state}`,\n    nextAvailable: \"Available today\",\n    verified: doctor.verificationStatus === 'verified',\n    photo: doctor.profilePhoto || doctorPhoto,\n    languages: doctor.languages || ['English'],\n    availableToday: doctor.isActive || false\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container px-4 py-4\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation('/')}\n            className=\"mb-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Search\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"container px-4 py-8\">\n        {/* Doctor Header */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col md:flex-row gap-6\">\n              <Avatar className=\"h-32 w-32 mx-auto md:mx-0\">\n                <AvatarImage src={transformedDoctor.photo} alt={doctor.fullName} />\n                <AvatarFallback className=\"text-2xl\">\n                  {doctor.fullName.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n\n              <div className=\"flex-1 text-center md:text-left\">\n                <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-2 justify-center md:justify-start\">\n                      Dr. {doctor.fullName}\n                      {transformedDoctor.verified && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          <Shield className=\"h-3 w-3 mr-1\" />\n                          Verified\n                        </Badge>\n                      )}\n                    </h1>\n                    <p className=\"text-xl text-muted-foreground mb-4\">{doctor.primarySpecialty}</p>\n                    \n                    <div className=\"flex flex-wrap items-center gap-4 justify-center md:justify-start text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                        <span className=\"font-medium\">{transformedDoctor.rating}</span>\n                        <span>({transformedDoctor.reviewCount} reviews)</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <span>{transformedDoctor.location}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <GraduationCap className=\"h-4 w-4\" />\n                        <span>{doctor.yearsOfExperience} years experience</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-center md:text-right\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\">₹{transformedDoctor.consultationFee}</div>\n                    <div className=\"text-sm text-muted-foreground mb-4\">per consultation</div>\n                    \n                    <div className=\"flex flex-col gap-2\">\n                      <Button \n                        onClick={handleBookConsultation}\n                        size=\"lg\"\n                        data-testid=\"button-book-consultation\"\n                      >\n                        <Video className=\"h-4 w-4 mr-2\" />\n                        Book Video Consultation\n                      </Button>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Phone className=\"h-4 w-4 mr-2\" />\n                          Audio Call\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <MessageCircle className=\"h-4 w-4 mr-2\" />\n                          Chat\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Doctor Details Tabs */}\n        <Tabs defaultValue=\"about\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"about\">About</TabsTrigger>\n            <TabsTrigger value=\"credentials\">Credentials</TabsTrigger>\n            <TabsTrigger value=\"education\">Education</TabsTrigger>\n            <TabsTrigger value=\"availability\">Availability</TabsTrigger>\n            <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"about\">\n            <Card>\n              <CardHeader>\n                <CardTitle>About Dr. {doctor.fullName}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {doctor.bio && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Biography</h3>\n                    <p className=\"text-muted-foreground\">{doctor.bio}</p>\n                  </div>\n                )}\n\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Specializations</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Badge variant=\"outline\">{doctor.primarySpecialty}</Badge>\n                    {doctor.subSpecialties?.map((specialty, index) => (\n                      <Badge key={index} variant=\"outline\">{specialty}</Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Languages</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {transformedDoctor.languages.map((language, index) => (\n                      <Badge key={index} variant=\"secondary\">{language}</Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {doctor.specialInterests && doctor.specialInterests.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Special Interests</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {doctor.specialInterests.map((interest, index) => (\n                        <Badge key={index} variant=\"outline\">{interest}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"credentials\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Medical Credentials</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-semibold\">Medical License</h4>\n                    <p className=\"text-muted-foreground\">{doctor.medicalLicense}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">License State</h4>\n                    <p className=\"text-muted-foreground\">{doctor.licenseState}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">License Expiry</h4>\n                    <p className=\"text-muted-foreground\">{doctor.licenseExpiry}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">Verification Status</h4>\n                    <Badge variant={doctor.verificationStatus === 'verified' ? 'default' : 'secondary'}>\n                      {doctor.verificationStatus}\n                    </Badge>\n                  </div>\n                </div>\n\n                {doctor.hospitalAffiliations && doctor.hospitalAffiliations.length > 0 && (\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Hospital Affiliations</h4>\n                    <div className=\"space-y-2\">\n                      {doctor.hospitalAffiliations.map((hospital, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"mr-2\">{hospital}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"education\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Education & Training</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold\">Medical School</h4>\n                  <p className=\"text-muted-foreground\">{doctor.medicalSchool}</p>\n                </div>\n                \n                {doctor.residency && (\n                  <div>\n                    <h4 className=\"font-semibold\">Residency</h4>\n                    <p className=\"text-muted-foreground\">{doctor.residency}</p>\n                  </div>\n                )}\n\n                {doctor.fellowship && (\n                  <div>\n                    <h4 className=\"font-semibold\">Fellowship</h4>\n                    <p className=\"text-muted-foreground\">{doctor.fellowship}</p>\n                  </div>\n                )}\n\n                <div>\n                  <h4 className=\"font-semibold\">Years of Experience</h4>\n                  <p className=\"text-muted-foreground\">{doctor.yearsOfExperience} years</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"availability\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Availability</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Available Today</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Dr. {doctor.fullName} is available for consultations\n                  </p>\n                  <Button onClick={handleBookConsultation}>\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    View Available Slots\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"reviews\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Patient Reviews</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <div className=\"flex items-center justify-center gap-2 mb-4\">\n                    <Star className=\"h-8 w-8 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"text-3xl font-bold\">{transformedDoctor.rating}</span>\n                  </div>\n                  <p className=\"text-muted-foreground\">\n                    Based on {transformedDoctor.reviewCount} patient reviews\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Booking Modal */}\n      <BookingModal\n        isOpen={isBookingModalOpen}\n        onClose={() => setIsBookingModalOpen(false)}\n        doctor={transformedDoctor}\n        onConfirmBooking={(bookingData) => {\n          console.log('Booking confirmed:', bookingData);\n          alert('Booking confirmed! You will receive a confirmation email shortly.');\n        }}\n      />\n    </div>\n  );\n}","size_bytes":14674},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { Heart, Stethoscope, Building2, Star, Shield, Clock } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container flex h-14 items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Heart className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-bold text-xl\">HealthCare</span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <ThemeToggle />\n            <Button onClick={handleLogin} data-testid=\"button-login\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto text-center\">\n          <h1 className=\"text-4xl font-bold tracking-tight sm:text-6xl mb-6\">\n            Healthcare at Your{\" \"}\n            <span className=\"text-primary\">Fingertips</span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Connect with qualified doctors, manage your health records, and get the care you need - all from the comfort of your home.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={handleLogin}\n            data-testid=\"button-get-started\"\n          >\n            Get Started Today\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-muted/50\">\n        <div className=\"container mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">Why Choose Our Platform?</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"text-center\">\n              <CardHeader>\n                <Stethoscope className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Expert Doctors</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Connect with board-certified physicians across all specialties.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"text-center\">\n              <CardHeader>\n                <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Secure & Private</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Your health data is protected with enterprise-grade security.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"text-center\">\n              <CardHeader>\n                <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>24/7 Access</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Get medical care whenever you need it, day or night.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Trust Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-8\">Trusted by Thousands</h2>\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">10,000+</div>\n              <div className=\"text-muted-foreground\">Happy Patients</div>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">500+</div>\n              <div className=\"text-muted-foreground\">Verified Doctors</div>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">50,000+</div>\n              <div className=\"text-muted-foreground\">Consultations Completed</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-primary-foreground mb-6\">\n            Ready to Take Control of Your Health?\n          </h2>\n          <p className=\"text-lg text-primary-foreground/80 mb-8\">\n            Join thousands of patients who trust our platform for their healthcare needs.\n          </p>\n          <Button \n            size=\"lg\" \n            variant=\"secondary\"\n            onClick={handleLogin}\n            data-testid=\"button-join-now\"\n          >\n            Join Now\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-8 border-t\">\n        <div className=\"container mx-auto text-center text-muted-foreground\">\n          <p>&copy; 2025 HealthCare Platform. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5617},"client/src/pages/PatientDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Calendar,\n  Clock,\n  FileText,\n  Heart,\n  Activity,\n  User,\n  Settings,\n  Bell,\n  Plus,\n  Search,\n  Filter,\n  Download,\n  Eye,\n  MessageCircle,\n  Video,\n  Phone,\n  Loader,\n  AlertCircle\n} from \"lucide-react\";\nimport type { Patient, Consultation, MedicalDocument } from \"@shared/schema\";\n\nexport default function PatientDashboard() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [location, setLocation] = useLocation();\n  const { user, isLoading: authLoading } = useAuth();\n  \n  // Redirect to login if not authenticated\n  if (!authLoading && !user) {\n    setLocation('/');\n    return null;\n  }\n\n  // Navigation handlers\n  const handleFindDoctor = () => {\n    setLocation('/');\n  };\n\n  const handleEmergency = () => {\n    console.log('Emergency button clicked');\n    // TODO: Implement emergency flow\n  };\n\n  const handleUploadDocument = () => {\n    console.log('Upload document clicked');\n    // TODO: Implement document upload\n  };\n\n  const handleBookCheckup = () => {\n    setLocation('/');\n  };\n\n  // Fetch patient data using authenticated user ID\n  const { data: patient, isLoading: patientLoading } = useQuery({\n    queryKey: ['/api/patients/user', user?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients/user/${user?.id}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          // Patient profile doesn't exist yet, this is expected for new users\n          return null;\n        }\n        throw new Error('Failed to fetch patient data');\n      }\n      return response.json() as Promise<Patient>;\n    },\n    enabled: !!user?.id && user?.userType === 'patient'\n  });\n\n  // Fetch consultations\n  const { data: consultations = [], isLoading: consultationsLoading } = useQuery({\n    queryKey: ['/api/consultations/patient', patient?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/consultations/patient/${patient?.id}`);\n      if (!response.ok) throw new Error('Failed to fetch consultations');\n      return response.json() as Promise<Consultation[]>;\n    },\n    enabled: !!patient?.id\n  });\n\n  // Fetch medical documents\n  const { data: documents = [], isLoading: documentsLoading } = useQuery({\n    queryKey: ['/api/medical-documents/patient', patient?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/medical-documents/patient/${patient?.id}`);\n      if (!response.ok) throw new Error('Failed to fetch documents');\n      return response.json() as Promise<MedicalDocument[]>;\n    },\n    enabled: !!patient?.id\n  });\n\n  // Mock data for demonstration\n  const mockPatient = {\n    id: \"patient-1\",\n    fullName: \"John Doe\",\n    dateOfBirth: \"1990-05-15\",\n    gender: \"Male\",\n    phoneNumber: \"+91 9876543210\",\n    city: \"Mumbai\",\n    state: \"Maharashtra\",\n    bloodGroup: \"O+\",\n    allergies: [\"Penicillin\", \"Shellfish\"],\n    chronicConditions: [\"Hypertension\"],\n    preferredBudgetRange: \"specialist\"\n  };\n\n  const mockConsultations = [\n    {\n      id: \"cons-1\",\n      doctorName: \"Dr. Sarah Johnson\",\n      specialty: \"Cardiology\",\n      scheduledAt: \"2024-09-25T14:00:00Z\",\n      status: \"scheduled\",\n      consultationType: \"video\",\n      consultationFee: \"500.00\"\n    },\n    {\n      id: \"cons-2\", \n      doctorName: \"Dr. Raj Patel\",\n      specialty: \"Dermatology\",\n      scheduledAt: \"2024-09-20T10:00:00Z\",\n      status: \"completed\",\n      consultationType: \"video\",\n      consultationFee: \"350.00\"\n    }\n  ];\n\n  const mockDocuments = [\n    {\n      id: \"doc-1\",\n      documentType: \"lab_report\",\n      fileName: \"Blood Test Report.pdf\",\n      documentDate: \"2024-09-15\",\n      issuingProvider: \"Metropolis Labs\"\n    },\n    {\n      id: \"doc-2\",\n      documentType: \"prescription\",\n      fileName: \"Prescription - Dr. Sarah Johnson.pdf\", \n      documentDate: \"2024-09-10\",\n      issuingProvider: \"Dr. Sarah Johnson\"\n    }\n  ];\n\n  const mockHealthMetrics = [\n    { type: \"Blood Pressure\", value: \"120/80\", date: \"2024-09-20\", status: \"normal\" },\n    { type: \"Weight\", value: \"75 kg\", date: \"2024-09-18\", status: \"normal\" },\n    { type: \"Blood Sugar\", value: \"95 mg/dL\", date: \"2024-09-15\", status: \"normal\" }\n  ];\n\n  if (authLoading || patientLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"flex items-center gap-2\">\n          <Loader className=\"h-6 w-6 animate-spin\" />\n          <span>Loading dashboard...</span>\n        </div>\n      </div>\n    );\n  }\n\n  // Use real patient data or fallback to user data for display\n  const displayPatient = patient || {\n    fullName: [user?.firstName, user?.lastName].filter(Boolean).join(' ') || 'Patient',\n    dateOfBirth: '1990-01-01',\n    gender: 'Unknown',\n    phoneNumber: 'Not provided',\n    city: 'Unknown',\n    state: 'Unknown',\n    bloodGroup: 'Unknown',\n    allergies: [],\n    chronicConditions: [],\n    preferredBudgetRange: 'basic'\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={user?.profileImageUrl || undefined} />\n                <AvatarFallback className=\"text-lg\">\n                  {displayPatient.fullName.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h1 className=\"text-2xl font-bold\">Welcome back, {displayPatient.fullName}</h1>\n                <p className=\"text-muted-foreground\">Manage your health journey</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-settings\">\n                <Settings className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container px-4 py-8\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Calendar className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Upcoming</p>\n                  <p className=\"text-2xl font-bold\">1</p>\n                  <p className=\"text-xs text-muted-foreground\">Consultation</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <FileText className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Documents</p>\n                  <p className=\"text-2xl font-bold\">{mockDocuments.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Records</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Heart className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Health Score</p>\n                  <p className=\"text-2xl font-bold\">85%</p>\n                  <p className=\"text-xs text-muted-foreground\">Good</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <Activity className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Last Checkup</p>\n                  <p className=\"text-2xl font-bold\">5</p>\n                  <p className=\"text-xs text-muted-foreground\">days ago</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"consultations\">Consultations</TabsTrigger>\n            <TabsTrigger value=\"documents\">Documents</TabsTrigger>\n            <TabsTrigger value=\"health\">Health Metrics</TabsTrigger>\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Upcoming Consultations */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Upcoming Consultations</CardTitle>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-consultations\">\n                    View All\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockConsultations.filter(c => c.status === 'scheduled').map((consultation) => (\n                      <div key={consultation.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                        <div className=\"p-2 bg-blue-100 rounded-lg\">\n                          <Video className=\"h-5 w-5 text-blue-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold\">{consultation.doctorName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{consultation.specialty}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(consultation.scheduledAt).toLocaleDateString()} at {new Date(consultation.scheduledAt).toLocaleTimeString()}\n                          </p>\n                        </div>\n                        <Badge>Scheduled</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Documents */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Recent Documents</CardTitle>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-documents\">\n                    View All\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockDocuments.slice(0, 3).map((document) => (\n                      <div key={document.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                        <div className=\"p-2 bg-green-100 rounded-lg\">\n                          <FileText className=\"h-5 w-5 text-green-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold\">{document.fileName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{document.issuingProvider}</p>\n                          <p className=\"text-xs text-muted-foreground\">{document.documentDate}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-document-${document.id}`}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-document-${document.id}`}>\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Health Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Health Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Overall Health Score</span>\n                        <span>85%</span>\n                      </div>\n                      <Progress value={85} className=\"h-2\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Blood Group</p>\n                        <p className=\"font-semibold\">{mockPatient.bloodGroup}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Age</p>\n                        <p className=\"font-semibold\">34 years</p>\n                      </div>\n                    </div>\n\n                    {mockPatient.allergies && mockPatient.allergies.length > 0 && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">Allergies</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {mockPatient.allergies.map((allergy, index) => (\n                            <Badge key={index} variant=\"destructive\" className=\"text-xs\">\n                              <AlertCircle className=\"h-3 w-3 mr-1\" />\n                              {allergy}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button className=\"h-20 flex flex-col gap-2\" onClick={handleFindDoctor} data-testid=\"button-find-doctor\">\n                      <Search className=\"h-6 w-6\" />\n                      <span className=\"text-sm\">Find Doctor</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" onClick={handleEmergency} data-testid=\"button-emergency\">\n                      <AlertCircle className=\"h-6 w-6\" />\n                      <span className=\"text-sm\">Emergency</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" onClick={handleUploadDocument} data-testid=\"button-upload-document\">\n                      <Plus className=\"h-6 w-6\" />\n                      <span className=\"text-sm\">Upload Doc</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" onClick={handleBookCheckup} data-testid=\"button-book-checkup\">\n                      <Calendar className=\"h-6 w-6\" />\n                      <span className=\"text-sm\">Book Checkup</span>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"consultations\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>All Consultations</CardTitle>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filter\n                  </Button>\n                  <Button size=\"sm\" data-testid=\"button-new-consultation\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    New Consultation\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockConsultations.map((consultation) => (\n                    <div key={consultation.id} className=\"flex items-center gap-4 p-6 border rounded-lg\">\n                      <div className=\"p-3 bg-blue-100 rounded-lg\">\n                        <Video className=\"h-6 w-6 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-semibold text-lg\">{consultation.doctorName}</h4>\n                          <Badge variant={consultation.status === 'completed' ? 'default' : 'secondary'}>\n                            {consultation.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-muted-foreground\">{consultation.specialty}</p>\n                        <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                          <span>\n                            {new Date(consultation.scheduledAt).toLocaleDateString()} at {new Date(consultation.scheduledAt).toLocaleTimeString()}\n                          </span>\n                          <span>₹{consultation.consultationFee}</span>\n                          <Badge variant=\"outline\">{consultation.consultationType}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col gap-2\">\n                        {consultation.status === 'scheduled' && (\n                          <Button size=\"sm\" data-testid={`button-join-consultation-${consultation.id}`}>\n                            Join Call\n                          </Button>\n                        )}\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-consultation-${consultation.id}`}>\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"documents\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Medical Documents</CardTitle>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filter\n                  </Button>\n                  <Button size=\"sm\" data-testid=\"button-upload-new-document\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Upload Document\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockDocuments.map((document) => (\n                    <div key={document.id} className=\"flex items-center gap-4 p-6 border rounded-lg\">\n                      <div className=\"p-3 bg-green-100 rounded-lg\">\n                        <FileText className=\"h-6 w-6 text-green-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-lg\">{document.fileName}</h4>\n                        <p className=\"text-muted-foreground\">{document.issuingProvider}</p>\n                        <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                          <span>{document.documentDate}</span>\n                          <Badge variant=\"outline\">{document.documentType.replace('_', ' ')}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-document-${document.id}`}>\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          View\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-download-document-${document.id}`}>\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          Download\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"health\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Recent Vitals</CardTitle>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-vitals\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Reading\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockHealthMetrics.map((metric, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                          <h4 className=\"font-semibold\">{metric.type}</h4>\n                          <p className=\"text-2xl font-bold text-primary\">{metric.value}</p>\n                          <p className=\"text-xs text-muted-foreground\">{metric.date}</p>\n                        </div>\n                        <Badge variant={metric.status === 'normal' ? 'default' : 'destructive'}>\n                          {metric.status}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Health Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <Activity className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Health Analytics</h3>\n                    <p className=\"text-muted-foreground\">\n                      Track your health metrics over time to identify trends and improvements.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"profile\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Personal Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm text-muted-foreground\">Full Name</label>\n                      <p className=\"font-semibold\">{mockPatient.fullName}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm text-muted-foreground\">Date of Birth</label>\n                      <p className=\"font-semibold\">{mockPatient.dateOfBirth}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm text-muted-foreground\">Gender</label>\n                      <p className=\"font-semibold\">{mockPatient.gender}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm text-muted-foreground\">Phone</label>\n                      <p className=\"font-semibold\">{mockPatient.phoneNumber}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm text-muted-foreground\">Location</label>\n                      <p className=\"font-semibold\">{mockPatient.city}, {mockPatient.state}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm text-muted-foreground\">Blood Group</label>\n                      <p className=\"font-semibold\">{mockPatient.bloodGroup}</p>\n                    </div>\n                  </div>\n                  <Button className=\"w-full\" data-testid=\"button-edit-profile\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Medical Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm text-muted-foreground\">Allergies</label>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {mockPatient.allergies?.map((allergy, index) => (\n                        <Badge key={index} variant=\"destructive\">{allergy}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm text-muted-foreground\">Chronic Conditions</label>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {mockPatient.chronicConditions?.map((condition, index) => (\n                        <Badge key={index} variant=\"outline\">{condition}</Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm text-muted-foreground\">Budget Preference</label>\n                    <p className=\"font-semibold capitalize\">{mockPatient.preferredBudgetRange}</p>\n                  </div>\n\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-edit-medical-info\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Update Medical Info\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":27627},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV !== 'development', // Allow insecure cookies in dev\n      sameSite: \"lax\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Check if user already exists to avoid overriding their role\n  const existingUser = await storage.getUser(claims[\"sub\"]);\n  \n  const userData: any = {\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  };\n\n  // Only set userType for new users (don't override existing roles)\n  if (!existingUser || !existingUser.userType) {\n    userData.userType = \"patient\"; // Default new users to patient role\n  }\n\n  const user = await storage.upsertUser(userData);\n\n  // Auto-create patient profile only for users who are actually patients\n  if (user.userType === 'patient') {\n    const existingPatient = await storage.getPatientByUserId(user.id);\n    if (!existingPatient) {\n      try {\n        const fullName = [claims[\"first_name\"], claims[\"last_name\"]]\n          .filter(Boolean)\n          .join(\" \") || \"Patient\";\n        \n        await storage.createPatient({\n          userId: user.id,\n          fullName,\n          dateOfBirth: \"1990-01-01\", // Placeholder - user can update later\n          gender: \"prefer_not_to_say\",\n          phoneNumber: \"000-000-0000\", // Placeholder - user can update later\n          city: \"Unknown\",\n          state: \"Unknown\",\n          pincode: \"00000\",\n        });\n      } catch (error) {\n        console.error('Error creating patient profile:', error);\n        // Don't fail auth if profile creation fails\n      }\n    }\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    \n    // Persist refreshed tokens to session\n    req.login(user, (err) => {\n      if (err) {\n        console.error('Error persisting refreshed session:', err);\n        res.status(401).json({ message: \"Unauthorized\" });\n        return;\n      }\n      return next();\n    });\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5834}},"version":1}